/* This file has been autogenerated from 'Matmul.idl'. */
/* CHANGES TO THIS FILE WILL BE LOST */

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include <fstream>
#include <sstream>
#include <c_compss.h>
#include "Matmul.h"

using namespace std;
using namespace boost;


void multiplyBlocks(Block* block1, Block* block2, Block* block3)
{
	 void *arrayObjs[15];
	 int found;


	 if (block1==NULL){
		 printf("ERROR: block1 is null.");
		 fflush(NULL);
		 GS_Off();
		 exit(1);	 }
	 // Add object treatment for argument block1;
	 char *block1_filename;
	 compss_pointer block1_cp;
	 block1_cp.type = 0;
	 block1_cp.elements = 0;
	 block1_cp.size = block1_cp.elements * sizeof(Block);
	 block1_cp.pointer = (void*)block1;
		 found = compss_register(&(*block1), (datatype)10, (direction)2, "Block", block1_filename, block1_cp.type, block1_cp.elements);
	 if (!found) {
			 debug_printf("[Generated C-Binding] Object not found in registry. \n\tStoring %s to cache with pointer %p type %d elements %d and size %ld\n", block1_filename,(void*)block1, block1_cp.type, block1_cp.elements, block1_cp.size );
			 get_cache()->storeInCache(block1_filename,block1_cp);
	 }
	 ostringstream block1_oss;
	 block1_oss << block1_filename << ":0:" << 0;
	 char *block1_value=strdup(block1_oss.str().c_str());
	 debug_printf("Binding Value: %s (before %s)\n", block1_value,block1_oss.str().c_str());
		 arrayObjs[0] = &block1_value;
		 int param1 = 13;
		 arrayObjs[1] = &param1;
		 int param2 = 2;
		 arrayObjs[2] = &param2;
		 int param3 = 3;
		 arrayObjs[3] = &param3;
		 char *param4 = "null";
		 arrayObjs[4] = &param4;

	 if (block2==NULL){
		 printf("ERROR: block2 is null.");
		 fflush(NULL);
		 GS_Off();
		 exit(1);	 }
	 // Add object treatment for argument block2;
	 char *block2_filename;
	 compss_pointer block2_cp;
	 block2_cp.type = 0;
	 block2_cp.elements = 0;
	 block2_cp.size = block2_cp.elements * sizeof(Block);
	 block2_cp.pointer = (void*)block2;
		 found = compss_register(&(*block2), (datatype)10, (direction)2, "Block", block2_filename, block2_cp.type, block2_cp.elements);
	 if (!found) {
			 debug_printf("[Generated C-Binding] Object not found in registry. \n\tStoring %s to cache with pointer %p type %d elements %d and size %ld\n", block2_filename,(void*)block2, block2_cp.type, block2_cp.elements, block2_cp.size );
			 get_cache()->storeInCache(block2_filename,block2_cp);
	 }
	 ostringstream block2_oss;
	 block2_oss << block2_filename << ":0:" << 0;
	 char *block2_value=strdup(block2_oss.str().c_str());
	 debug_printf("Binding Value: %s (before %s)\n", block2_value,block2_oss.str().c_str());
		 arrayObjs[5] = &block2_value;
		 int param6 = 13;
		 arrayObjs[6] = &param6;
		 int param7 = 2;
		 arrayObjs[7] = &param7;
		 int param8 = 3;
		 arrayObjs[8] = &param8;
		 char *param9 = "null";
		 arrayObjs[9] = &param9;

	 if (block3==NULL){
		 printf("ERROR: block3 is null.");
		 fflush(NULL);
		 GS_Off();
		 exit(1);	 }
	 // Add object treatment for argument block3;
	 char *block3_filename;
	 compss_pointer block3_cp;
	 block3_cp.type = 0;
	 block3_cp.elements = 0;
	 block3_cp.size = block3_cp.elements * sizeof(Block);
	 block3_cp.pointer = (void*)block3;
		 found = compss_register(&(*block3), (datatype)10, (direction)2, "Block", block3_filename, block3_cp.type, block3_cp.elements);
	 if (!found) {
			 debug_printf("[Generated C-Binding] Object not found in registry. \n\tStoring %s to cache with pointer %p type %d elements %d and size %ld\n", block3_filename,(void*)block3, block3_cp.type, block3_cp.elements, block3_cp.size );
			 get_cache()->storeInCache(block3_filename,block3_cp);
	 }
	 ostringstream block3_oss;
	 block3_oss << block3_filename << ":0:" << 0;
	 char *block3_value=strdup(block3_oss.str().c_str());
	 debug_printf("Binding Value: %s (before %s)\n", block3_value,block3_oss.str().c_str());
		 arrayObjs[10] = &block3_value;
		 int param11 = 13;
		 arrayObjs[11] = &param11;
		 int param12 = 2;
		 arrayObjs[12] = &param12;
		 int param13 = 3;
		 arrayObjs[13] = &param13;
		 char *param14 = "null";
		 arrayObjs[14] = &param14;


	 char *method_name = strdup("multiplyBlocks");
	 GS_ExecuteTask(0L, "NULL", method_name, 0, false, 3, (void**)arrayObjs);
	 debug_printf("[   BINDING]  -  @%s  -  Task submited in the runtime\n", method_name);

	 debug_printf("[   BINDING]  -  @%s  -  Free method name\n", method_name);
	 free(method_name);
	 debug_printf("[   BINDING]  -  End of task submission.\n");
}

int execute(int argc, char **argv, CBindingCache* cache, int serializeOuts) {

return 0;
}
int CBindingCache::removeData(compss_pointer cp){
	 switch(cp.type){
		 case 0:
			 Block *data_0;
			 data_0 = (Block*)cp.pointer;
			 if(is_debug()){
			 cout << "[C Binding] Deleting object from memory..." << endl;
			 }			 delete(data_0);
			 if(is_debug()){
				 cout << "[C Binding] Object has been removed." << endl;
			 }			 break;
		 default:;
	 }
	 return 0;}

int CBindingCache::copyData(compss_pointer from, compss_pointer &to){
	 switch(from.type){
		 case 0:
			 Block *from_0;
			 Block *to_0;
			 from_0 = (Block*)from.pointer;
			 { int from_0_res = compss_object_copy(from_0, to_0);
			 if (from_0_res != 0){
				 cout << "[C Binding] Error deserializing from memory." << endl;
				 return from_0_res;
			 } }
			 to.pointer = (void*)to_0;
			 to.elements = from.elements;
			 to.type = from.type;
			 to.size = from.size;
			 break;
		 default:;
	 }
	 return 0;}

int CBindingCache::serializeToStream(compss_pointer cp, JavaNioConnStreamBuffer &jsb){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be serialized." << endl << flush;
			 }			 Block *data_0;
			 data_0 = (Block*)cp.pointer;
				  int data_0_res = compss_object_serialize(data_0, jsb);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return data_0_res;
				 }
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been serialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

int CBindingCache::serializeToFile(compss_pointer cp, const char * filename){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be serialized." << endl << flush;
			 }			 Block *data_0;
			 data_0 = (Block*)cp.pointer;
				  int data_0_res = compss_object_serialize(data_0, filename);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return data_0_res;
				 }
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been serialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

int CBindingCache::deserializeFromStream(JavaNioConnStreamBuffer &jsb, compss_pointer &cp){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be deserialized." << endl << flush;
			 }			 Block *data_0 = new Block();
			 cp.pointer = data_0;
				  int data_0_res = compss_object_deserialize(data_0, jsb);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error deserializing from memory." << endl;
					 return data_0_res;
				 } 
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been deserialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

int CBindingCache::deserializeFromFile(const char * filename, compss_pointer &cp){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be deserialized." << endl << flush;
			 }			 Block *data_0 = new Block();
				  int data_0_res = compss_object_deserialize(data_0, filename);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error deserializing from memory." << endl;
					 return data_0_res;
				 } 
			 cp.pointer = data_0;
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been deserialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

