/* This file has been autogenerated from 'Matmul.idl'. */
/* CHANGES TO THIS FILE WILL BE LOST */

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include <fstream>
#include <sstream>
#include <c_compss_commons.h>
#include "Matmul.h"

using namespace std;

#ifdef OMPSS2_ENABLED
#include <pthread.h>
#include <nanos6/bootstrap.h>
#include <nanos6/library-mode.h>
#endif
#ifdef OMPSS2_ENABLED
typedef struct {
	pthread_mutex_t mutex;
	pthread_cond_t cond;
	int signaled;
} condition_variable_t;

typedef struct {
	Block* block1;
	Block* block2;
	Block* block3;
} multiplyBlocks_struct_t;
void condition_variable_callback(void *args) {
	condition_variable_t *cond_var = (condition_variable_t *) args;
	pthread_mutex_lock(&cond_var->mutex);
	cond_var->signaled = 1;
	pthread_cond_signal(&cond_var->cond);
	pthread_mutex_unlock(&cond_var->mutex);
}

void wait_condition_variable(condition_variable_t *cond_var) {
	pthread_mutex_lock(&cond_var->mutex);
	while (cond_var->signaled == 0) {
		pthread_cond_wait(&cond_var->cond, &cond_var->mutex);
	}
pthread_mutex_unlock(&cond_var->mutex);
}


void multiplyBlocks_wrapper(void* args) {
	multiplyBlocks_struct_t* struct_ = (multiplyBlocks_struct_t*) args;
	multiplyBlocks(struct_->block1, struct_->block2, struct_->block3);
}
#endif

int execute(int argc, char **argv, CBindingCache* cache, int serializeOuts) {

	 if(is_debug()){
		 cout << endl;
		 cout << "[C-BINDING] ----------------- C WORKER -----------------" << endl;
		 cout << "[C-BINDING] Total number of parameters: " << argc << endl;
	 }
	 if (argc < MIN_NUM_INTERNAL_ARGS) {
		 cout << "[C-BINDING] ERROR: Incorrect number of COMPSs internal parameters"<< endl;
		 cout << "[C-BINDING] Aborting..." << endl;
		 return -1; 
	 }

	 if(is_debug()){
		 cout << "[C-BINDING] Executable: " << argv[0] << endl;
		 cout << "[C-BINDING] Tracing: " <<  argv[1] << endl;
		 cout << "[C-BINDING] Task Id: " << argv[2] << endl;
		 cout << "[C-BINDING] Worker Debug: " << argv[3] << endl;
		 cout << "[C-BINDING] StorageConf: " << argv[4] << endl;
		 cout << "[C-BINDING] MethodType: " << argv[5] << endl;
		 cout << "[C-BINDING] ClassName: " << argv[6] << endl;
		 cout << "[C-BINDING] MethodName: " << argv[7] << endl;
		 cout << "[C-BINDING] TimeOut: " << argv[8] << endl;
		 cout << "[C-BINDING] NumSlaves: " << argv[9] << endl;
	 }
	 int numSlaves=atoi(argv[9]);
	 if(is_debug()){
		 for (int i = 0; i < numSlaves; ++i) {
			 cout <<"[C-BINDING] Slave " << i << " has name " << argv[NUM_BASE_ARGS + i] << endl;
		 }
	 }
	 int NUM_INTERNAL_ARGS=NUM_BASE_ARGS + numSlaves;
		 cout << "[C-BINDING] NumComputingUnits: " << argv[NUM_INTERNAL_ARGS++] << endl;
		 cout << "[C-BINDING] HasTarget: " << argv[NUM_INTERNAL_ARGS++] << endl;
		 cout << "[C-BINDING] NumReturns: " << argv[NUM_INTERNAL_ARGS++] << endl;
		 cout << "[C-BINDING] ReturnType: " << argv[NUM_INTERNAL_ARGS++] << endl;
		 cout << "[C-BINDING] Num App Params: " << argv[NUM_INTERNAL_ARGS++] << endl;
		 cout << "[C-BINDING] Application Arguments:" << endl;
		 for(int i = NUM_INTERNAL_ARGS; i < argc; i++) { 
			 cout << "	" << argv[i] << endl;
		 }
		 cout << flush;

	 enum operationCode opCod;
	 char *opName = strdup(argv[METHOD_NAME_POS]);
	 for(int i=0; i < N_OPS; i++) {
		 if(strcmp(operationName[i], opName) == 0) {
			 opCod=(enum operationCode)i;
			 break;
		 }
	 }
	 if(is_debug()){
		 cout << "[C-BINDING] OpName: " << opName << "OpCode: " << (int)opCod << endl;
		 cout << "[C-BINDING] --------------------------------------------"<< endl << endl << flush;
		 cout << "[C-BINDING] Data in cache before executing:" << endl;
		 cache->printValues();
	 }
	 int arg_offset = NUM_INTERNAL_ARGS;
	 switch(opCod)
	 {
	 case multiplyBlocksOp:
		 {
			 Block* block1;
			 arg_offset += 5;
			 char* block1_filename_og = strdup(argv[arg_offset]);
			 arg_offset ++;
			 if(is_debug()) cout <<"[C Binding] Received value : "<< block1_filename_og << endl;
			 int block1_type = atoi(argv[arg_offset]);
			 arg_offset ++;
			 int block1_elements = atoi(argv[arg_offset]);
			 char* block1_filename, *block1_orig_id, *block1_dest_id, *block1_pres_data, *block1_write_data;
			 block1_filename = block1_filename_og ;
			 block1_orig_id = strsep(&block1_filename,":");
			 if (block1_orig_id != NULL && block1_filename != NULL){ // Obtain object from cache
				 if(is_debug()) cout << "[C Binding] Managing object data id for block1 ..." << endl << flush;
				 block1_dest_id = strsep(&block1_filename,":");
				 block1_pres_data = strsep(&block1_filename,":");
				 block1_write_data = strsep(&block1_filename,":");
				 string block1_orig_id_str(block1_orig_id);
				 string block1_dest_id_str(block1_dest_id);
				 if(is_debug()) cout << "[C Binding] Checking if object block1 with id "<< block1_dest_id_str << " is in cache." << endl << flush;
				 bool found = cache->isInCache(block1_dest_id);
				 if (!found){
					 if(is_debug()) cout << "[C Binding] Destination id not found in cache. Checking if object block1 with id "<< block1_orig_id_str << " is in cache." << endl << flush;
					 found = cache->isInCache(block1_orig_id);
					 if (!found){
						 cout << "[C Binding] Deserializing object block1 from " << block1_dest_id_str << " as " << block1_dest_id_str << endl << flush;
						 compss_pointer cp;
						 cp.type= 0;
						 cp.elements= block1_elements;
						 cp.size = cp.elements * sizeof(Block);
						 int res = cache->pullFromFile(block1_dest_id, block1_dest_id, cp);
						 if (res != 0){
							 if(is_debug()) cout << "[C Binding] Error Deserializing object block1 as "<< block1_dest_id_str <<". Deserializing object block1 from " << block1_orig_id_str << " as " << block1_dest_id_str << endl << flush;
							 res = cache->pullFromFile(block1_dest_id, block1_orig_id, cp);
							 if (res != 0){
								 cerr << "[C Binding] Error Deserializing object block1 as "<< block1_orig_id_str << endl << flush;
								 return res;
							 }
						 }
						 block1 = (Block*)cp.pointer;
						 if(is_debug()) cout << "[C Binding] Object block1 has been added to the cache as " << block1_dest_id_str << " with type 0."  << endl << flush;
					 } else {  // found as origin id -> move or copy 
						 if (string(block1_pres_data) == "true"){
							 if(is_debug()) cout << "[C Binding] Copying object block1 in cache. From " << block1_orig_id << " to "<< block1_dest_id << endl << flush;
							 compss_pointer block1_to;
							 int res = cache->copyInCache(block1_orig_id, block1_dest_id, block1_to);
							 if (res != 0){
								 cerr << "[C Binding] Error copying object block1 in "<< block1_orig_id << endl << flush;
								 return res;
							 }
							 block1 = (Block*)block1_to.pointer;
						 } else { 
							 if(is_debug()) cout << "[C Binding] Moving object block1 in cache. From " << block1_orig_id << " to "<< block1_dest_id << endl << flush;
							 int res = cache->moveInCache(block1_orig_id, block1_dest_id);
							 if (res != 0){
								 cerr << "[C Binding] Error copying object block1 in "<< block1_orig_id << endl << flush;
								 return res;
							 }
							 if(is_debug()) cout << "[C Binding] Object block1 has been added to the cache as" << block1_dest_id_str << " with type 0. Previous version is kept as " << block1_orig_id_str << endl << flush;
							 compss_pointer cp;
							 res = cache->getFromCache(block1_dest_id, cp);
							 if (res != 0){
								 cerr << "[C Binding] Error getting from cache object block1 as "<< block1_dest_id_str << endl << flush;
								 return res;
							 }
							 block1 = (Block*)cp.pointer;
						 }
					 } //end not found as origin 
				 } else { // found as dest id -> get from cache
					 compss_pointer cp;
					 int res = cache->getFromCache(block1_dest_id, cp);
					 if (res != 0){
						 cerr << "[C Binding] Error getting from cache object block1 as "<< block1_dest_id_str << endl << flush;
						 return res;
					 }
					 block1 = (Block*)cp.pointer;
					 if(is_debug()) cout << "[C Binding] Object block1 has been read from the cache as" << block1_dest_id_str << endl << flush;
				 } //end found as dest id 
				 if (string(block1_pres_data) == "false"){
					 cache->deleteFromCache(block1_orig_id, false);
					 if(is_debug()) cout << "[C Binding] Object " << block1_orig_id_str << " has been removed from the cache." << endl << flush;
				 }
				 if (serializeOuts < 1){
					 remove(block1_dest_id);
					 if(is_debug()) cout << "[C Binding] Removed file " << block1_dest_id << endl;
				 }
			 } else { //Obtain object as file 
				 if(is_debug()) cout << "[C Binding] Data ID for parameter block1 not found in argument value. Reseting filename to " << block1_filename_og << endl << flush;
				 block1_filename = block1_filename_og ;
				 block1_dest_id = block1_filename_og ;
				 compss_pointer block1_cp;
				 block1_cp.type= 0;
				 block1_cp.elements= block1_elements;
				 block1_cp.pointer = (void*)block1;
				 block1_cp.size = block1_cp.elements*sizeof(Block);
				 int res = cache->deserializeFromFile(block1_filename, block1_cp);
				 if (res != 0){
					 cout << "[C Binding] Error deserializing object block1 from file "<< block1_filename << endl << flush;
					 return res;
				 }
				 block1 = (Block*)block1_cp.pointer;
			 } //end obtain object as file 
			 arg_offset += 1;

			 Block* block2;
			 arg_offset += 5;
			 char* block2_filename_og = strdup(argv[arg_offset]);
			 arg_offset ++;
			 if(is_debug()) cout <<"[C Binding] Received value : "<< block2_filename_og << endl;
			 int block2_type = atoi(argv[arg_offset]);
			 arg_offset ++;
			 int block2_elements = atoi(argv[arg_offset]);
			 char* block2_filename, *block2_orig_id, *block2_dest_id, *block2_pres_data, *block2_write_data;
			 block2_filename = block2_filename_og ;
			 block2_orig_id = strsep(&block2_filename,":");
			 if (block2_orig_id != NULL && block2_filename != NULL){ // Obtain object from cache
				 if(is_debug()) cout << "[C Binding] Managing object data id for block2 ..." << endl << flush;
				 block2_dest_id = strsep(&block2_filename,":");
				 block2_pres_data = strsep(&block2_filename,":");
				 block2_write_data = strsep(&block2_filename,":");
				 string block2_orig_id_str(block2_orig_id);
				 string block2_dest_id_str(block2_dest_id);
				 if(is_debug()) cout << "[C Binding] Checking if object block2 with id "<< block2_dest_id_str << " is in cache." << endl << flush;
				 bool found = cache->isInCache(block2_dest_id);
				 if (!found){
					 if(is_debug()) cout << "[C Binding] Destination id not found in cache. Checking if object block2 with id "<< block2_orig_id_str << " is in cache." << endl << flush;
					 found = cache->isInCache(block2_orig_id);
					 if (!found){
						 cout << "[C Binding] Deserializing object block2 from " << block2_dest_id_str << " as " << block2_dest_id_str << endl << flush;
						 compss_pointer cp;
						 cp.type= 0;
						 cp.elements= block2_elements;
						 cp.size = cp.elements * sizeof(Block);
						 int res = cache->pullFromFile(block2_dest_id, block2_dest_id, cp);
						 if (res != 0){
							 if(is_debug()) cout << "[C Binding] Error Deserializing object block2 as "<< block2_dest_id_str <<". Deserializing object block2 from " << block2_orig_id_str << " as " << block2_dest_id_str << endl << flush;
							 res = cache->pullFromFile(block2_dest_id, block2_orig_id, cp);
							 if (res != 0){
								 cerr << "[C Binding] Error Deserializing object block2 as "<< block2_orig_id_str << endl << flush;
								 return res;
							 }
						 }
						 block2 = (Block*)cp.pointer;
						 if(is_debug()) cout << "[C Binding] Object block2 has been added to the cache as " << block2_dest_id_str << " with type 0."  << endl << flush;
					 } else {  // found as origin id -> move or copy 
						 if (string(block2_pres_data) == "true"){
							 if(is_debug()) cout << "[C Binding] Copying object block2 in cache. From " << block2_orig_id << " to "<< block2_dest_id << endl << flush;
							 compss_pointer block2_to;
							 int res = cache->copyInCache(block2_orig_id, block2_dest_id, block2_to);
							 if (res != 0){
								 cerr << "[C Binding] Error copying object block2 in "<< block2_orig_id << endl << flush;
								 return res;
							 }
							 block2 = (Block*)block2_to.pointer;
						 } else { 
							 if(is_debug()) cout << "[C Binding] Moving object block2 in cache. From " << block2_orig_id << " to "<< block2_dest_id << endl << flush;
							 int res = cache->moveInCache(block2_orig_id, block2_dest_id);
							 if (res != 0){
								 cerr << "[C Binding] Error copying object block2 in "<< block2_orig_id << endl << flush;
								 return res;
							 }
							 if(is_debug()) cout << "[C Binding] Object block2 has been added to the cache as" << block2_dest_id_str << " with type 0. Previous version is kept as " << block2_orig_id_str << endl << flush;
							 compss_pointer cp;
							 res = cache->getFromCache(block2_dest_id, cp);
							 if (res != 0){
								 cerr << "[C Binding] Error getting from cache object block2 as "<< block2_dest_id_str << endl << flush;
								 return res;
							 }
							 block2 = (Block*)cp.pointer;
						 }
					 } //end not found as origin 
				 } else { // found as dest id -> get from cache
					 compss_pointer cp;
					 int res = cache->getFromCache(block2_dest_id, cp);
					 if (res != 0){
						 cerr << "[C Binding] Error getting from cache object block2 as "<< block2_dest_id_str << endl << flush;
						 return res;
					 }
					 block2 = (Block*)cp.pointer;
					 if(is_debug()) cout << "[C Binding] Object block2 has been read from the cache as" << block2_dest_id_str << endl << flush;
				 } //end found as dest id 
				 if (string(block2_pres_data) == "false"){
					 cache->deleteFromCache(block2_orig_id, false);
					 if(is_debug()) cout << "[C Binding] Object " << block2_orig_id_str << " has been removed from the cache." << endl << flush;
				 }
				 if (serializeOuts < 1){
					 remove(block2_dest_id);
					 if(is_debug()) cout << "[C Binding] Removed file " << block2_dest_id << endl;
				 }
			 } else { //Obtain object as file 
				 if(is_debug()) cout << "[C Binding] Data ID for parameter block2 not found in argument value. Reseting filename to " << block2_filename_og << endl << flush;
				 block2_filename = block2_filename_og ;
				 block2_dest_id = block2_filename_og ;
				 compss_pointer block2_cp;
				 block2_cp.type= 0;
				 block2_cp.elements= block2_elements;
				 block2_cp.pointer = (void*)block2;
				 block2_cp.size = block2_cp.elements*sizeof(Block);
				 int res = cache->deserializeFromFile(block2_filename, block2_cp);
				 if (res != 0){
					 cout << "[C Binding] Error deserializing object block2 from file "<< block2_filename << endl << flush;
					 return res;
				 }
				 block2 = (Block*)block2_cp.pointer;
			 } //end obtain object as file 
			 arg_offset += 1;

			 Block* block3;
			 arg_offset += 5;
			 char* block3_filename_og = strdup(argv[arg_offset]);
			 arg_offset ++;
			 if(is_debug()) cout <<"[C Binding] Received value : "<< block3_filename_og << endl;
			 int block3_type = atoi(argv[arg_offset]);
			 arg_offset ++;
			 int block3_elements = atoi(argv[arg_offset]);
			 char* block3_filename, *block3_orig_id, *block3_dest_id, *block3_pres_data, *block3_write_data;
			 block3_filename = block3_filename_og ;
			 block3_orig_id = strsep(&block3_filename,":");
			 if (block3_orig_id != NULL && block3_filename != NULL){ // Obtain object from cache
				 if(is_debug()) cout << "[C Binding] Managing object data id for block3 ..." << endl << flush;
				 block3_dest_id = strsep(&block3_filename,":");
				 block3_pres_data = strsep(&block3_filename,":");
				 block3_write_data = strsep(&block3_filename,":");
				 string block3_orig_id_str(block3_orig_id);
				 string block3_dest_id_str(block3_dest_id);
				 if(is_debug()) cout << "[C Binding] Checking if object block3 with id "<< block3_dest_id_str << " is in cache." << endl << flush;
				 bool found = cache->isInCache(block3_dest_id);
				 if (!found){
					 if(is_debug()) cout << "[C Binding] Destination id not found in cache. Checking if object block3 with id "<< block3_orig_id_str << " is in cache." << endl << flush;
					 found = cache->isInCache(block3_orig_id);
					 if (!found){
						 cout << "[C Binding] Deserializing object block3 from " << block3_dest_id_str << " as " << block3_dest_id_str << endl << flush;
						 compss_pointer cp;
						 cp.type= 0;
						 cp.elements= block3_elements;
						 cp.size = cp.elements * sizeof(Block);
						 int res = cache->pullFromFile(block3_dest_id, block3_dest_id, cp);
						 if (res != 0){
							 if(is_debug()) cout << "[C Binding] Error Deserializing object block3 as "<< block3_dest_id_str <<". Deserializing object block3 from " << block3_orig_id_str << " as " << block3_dest_id_str << endl << flush;
							 res = cache->pullFromFile(block3_dest_id, block3_orig_id, cp);
							 if (res != 0){
								 cerr << "[C Binding] Error Deserializing object block3 as "<< block3_orig_id_str << endl << flush;
								 return res;
							 }
						 }
						 block3 = (Block*)cp.pointer;
						 if(is_debug()) cout << "[C Binding] Object block3 has been added to the cache as " << block3_dest_id_str << " with type 0."  << endl << flush;
					 } else {  // found as origin id -> move or copy 
						 if (string(block3_pres_data) == "true"){
							 if(is_debug()) cout << "[C Binding] Copying object block3 in cache. From " << block3_orig_id << " to "<< block3_dest_id << endl << flush;
							 compss_pointer block3_to;
							 int res = cache->copyInCache(block3_orig_id, block3_dest_id, block3_to);
							 if (res != 0){
								 cerr << "[C Binding] Error copying object block3 in "<< block3_orig_id << endl << flush;
								 return res;
							 }
							 block3 = (Block*)block3_to.pointer;
						 } else { 
							 if(is_debug()) cout << "[C Binding] Moving object block3 in cache. From " << block3_orig_id << " to "<< block3_dest_id << endl << flush;
							 int res = cache->moveInCache(block3_orig_id, block3_dest_id);
							 if (res != 0){
								 cerr << "[C Binding] Error copying object block3 in "<< block3_orig_id << endl << flush;
								 return res;
							 }
							 if(is_debug()) cout << "[C Binding] Object block3 has been added to the cache as" << block3_dest_id_str << " with type 0. Previous version is kept as " << block3_orig_id_str << endl << flush;
							 compss_pointer cp;
							 res = cache->getFromCache(block3_dest_id, cp);
							 if (res != 0){
								 cerr << "[C Binding] Error getting from cache object block3 as "<< block3_dest_id_str << endl << flush;
								 return res;
							 }
							 block3 = (Block*)cp.pointer;
						 }
					 } //end not found as origin 
				 } else { // found as dest id -> get from cache
					 compss_pointer cp;
					 int res = cache->getFromCache(block3_dest_id, cp);
					 if (res != 0){
						 cerr << "[C Binding] Error getting from cache object block3 as "<< block3_dest_id_str << endl << flush;
						 return res;
					 }
					 block3 = (Block*)cp.pointer;
					 if(is_debug()) cout << "[C Binding] Object block3 has been read from the cache as" << block3_dest_id_str << endl << flush;
				 } //end found as dest id 
				 if (string(block3_pres_data) == "false"){
					 cache->deleteFromCache(block3_orig_id, false);
					 if(is_debug()) cout << "[C Binding] Object " << block3_orig_id_str << " has been removed from the cache." << endl << flush;
				 }
				 if (serializeOuts < 1){
					 remove(block3_dest_id);
					 if(is_debug()) cout << "[C Binding] Removed file " << block3_dest_id << endl;
				 }
			 } else { //Obtain object as file 
				 if(is_debug()) cout << "[C Binding] Data ID for parameter block3 not found in argument value. Reseting filename to " << block3_filename_og << endl << flush;
				 block3_filename = block3_filename_og ;
				 block3_dest_id = block3_filename_og ;
				 compss_pointer block3_cp;
				 block3_cp.type= 0;
				 block3_cp.elements= block3_elements;
				 block3_cp.pointer = (void*)block3;
				 block3_cp.size = block3_cp.elements*sizeof(Block);
				 int res = cache->deserializeFromFile(block3_filename, block3_cp);
				 if (res != 0){
					 cout << "[C Binding] Error deserializing object block3 from file "<< block3_filename << endl << flush;
					 return res;
				 }
				 block3 = (Block*)block3_cp.pointer;
			 } //end obtain object as file 
			 arg_offset += 1;

			 
			 
			 
#ifndef OMPSS2_ENABLED
			 if(is_debug()) cout << "[C Binding] Calling function (null).multiplyBlocks" << endl << flush;
			 multiplyBlocks(block1, block2, block3);
			 if(is_debug()) cout << "[C Binding] Execution of function (null).multiplyBlocks finished." << endl << flush;

#else
			multiplyBlocks_struct_t multiplyBlocks_struct;
			multiplyBlocks_struct.block1 = block1;
			multiplyBlocks_struct.block2 = block2;
			multiplyBlocks_struct.block3 = block3;
			 
			 if(is_debug()) cout << "[C Binding] Spawning function (null).multiplyBlocks as OmpSs-2 task" << endl << flush;
			condition_variable_t cond_var = {PTHREAD_MUTEX_INITIALIZER, PTHREAD_COND_INITIALIZER, 0};
			nanos6_spawn_function(multiplyBlocks_wrapper, &multiplyBlocks_struct, condition_variable_callback, &cond_var, "multiplyBlocks_spawned_task");

			wait_condition_variable(&cond_var);
#endif
			 if (serializeOuts){
				 if(is_debug()) cout << "[C Binding] Object will be serialized as output." << endl << flush;
				  int block1_res = compss_object_serialize(block1, block1_dest_id);
				 if (block1_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return block1_res;
				 }

				  int block2_res = compss_object_serialize(block2, block2_dest_id);
				 if (block2_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return block2_res;
				 }

				  int block3_res = compss_object_serialize(block3, block3_dest_id);
				 if (block3_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return block3_res;
				 }

			 if(is_debug()) cout << "[C Binding] Object has been serialized as output." << endl << flush;
			 }
			 free(block1_filename_og);
			 free(block2_filename_og);
			 free(block3_filename_og);
		 if (is_debug()){
			 cout << "[C-BINDING] Data in cache after execution" << endl;
			 cache->printValues();
	 }
			 return 0;
		 }
		 break;
	 }

	 cout << "Incorrect Operation Code. Aborting..."<< endl << flush;
	 return -1;
}
int CBindingCache::removeData(compss_pointer cp){
	 switch(cp.type){
		 case 0:
			 if (cp.pointer != NULL) {
 				 if(is_debug()){
					 cout << "[C Binding] Deleting object from memory " << hex << cp.pointer << endl;
				 }
				 if (cp.elements > 0 ){
					 cout << "[C Binding] Deleting array" << endl;
					 free(cp.pointer);
				 } else {
					 cout << "[C Binding] Deleting object" << endl;
					 delete((Block*) cp.pointer);
				 }
				 if(is_debug()){
					 cout << "[C Binding] Object has been removed." << endl;
				 }
			 }
			 break;
		 default:;
	 }
	 return 0;}

int CBindingCache::copyData(compss_pointer from, compss_pointer &to){
	 switch(from.type){
		 case 0:
			 Block *from_0;
			 Block *to_0;
			 from_0 = (Block*)from.pointer;
			 { int from_0_res = compss_object_copy(from_0, to_0);
			 if (from_0_res != 0){
				 cout << "[C Binding] Error deserializing from memory." << endl;
				 return from_0_res;
			 } }
			 to.pointer = (void*)to_0;
			 to.elements = from.elements;
			 to.type = from.type;
			 to.size = from.size;
			 break;
		 default:;
	 }
	 return 0;}

int CBindingCache::serializeToStream(compss_pointer cp, JavaNioConnStreamBuffer &jsb){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be serialized." << endl << flush;
			 }			 Block *data_0;
			 data_0 = (Block*)cp.pointer;
				  int data_0_res = compss_object_serialize(data_0, jsb);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return data_0_res;
				 }
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been serialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

int CBindingCache::serializeToFile(compss_pointer cp, const char * filename){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be serialized." << endl << flush;
			 }			 Block *data_0;
			 data_0 = (Block*)cp.pointer;
				  int data_0_res = compss_object_serialize(data_0, filename);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error serializing from memory." << endl;
					 return data_0_res;
				 }
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been serialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

int CBindingCache::deserializeFromStream(JavaNioConnStreamBuffer &jsb, compss_pointer &cp){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be deserialized." << endl << flush;
			 }			 Block *data_0 = new Block();
			 cp.pointer = data_0;
				  int data_0_res = compss_object_deserialize(data_0, jsb);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error deserializing from memory." << endl;
					 return data_0_res;
				 } 
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been deserialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

int CBindingCache::deserializeFromFile(const char * filename, compss_pointer &cp){
	 switch(cp.type){
		 case 0:
		 {			 if(is_debug()){
				 cout << "[C Binding] Object data_0 is about to be deserialized." << endl << flush;
			 }			 Block *data_0 = new Block();
				  int data_0_res = compss_object_deserialize(data_0, filename);
				 if (data_0_res != 0){
					 cout << "[C Binding] Error deserializing from memory." << endl;
					 return data_0_res;
				 } 
			 cp.pointer = data_0;
			 if(is_debug()){
				 cout << "[C Binding] Object data_0 has been deserialized." << endl << flush;
			 }			 break;
		 }	 }
	 return 0;
}

void GE_initThread() {

#ifdef OMPSS2_ENABLED
		#ifdef OMPSS_ENABLED
			#error Only one of both OmpSs2 and OmpSs can be enabled.
		#endif
#endif

#ifdef OMPSS_ENABLED
		#ifdef OMPSS2_ENABLED
			#error Only one of both OmpSs2 and OmpSs can be enabled.
		#endif
 cout << "DEBUG LOG: nanos ADMIT CURRENT THREAD" << endl;
		 nanos_admit_current_thread();
#endif
}
void GE_finishThread() {

#ifdef OMPSS_ENABLED
cout << "DEBUG LOG: nanos LEAVE TEAM CURRENT THREAD" << endl;
		 nanos_leave_team();
		 nanos_expel_current_thread();
#endif
}
