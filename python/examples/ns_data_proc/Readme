This is the Readme for:
Neuro-science Data Processing

[Name]: Neuro-science Data Processing  
[Contact Person]: suport-compss@bsc.es
[Access Level]: private
[License Agreement]: GPL
[Platform]: COMPSs

[Body]
== Description ==
Application that computes correlations between neurons. This is the implementation used for publication on the HBP Unified Portal as a UP task.

== Versions ==
There are four versions: 
=== Version 1 ===
''tejedor_neuron_correlation_pycompss'' is the initial code.
=== Version 2 ===
''basic'', where the cc_surrogate_range task is applied to all neurons. 
=== Version 3 ===
''oneNeuron'', where the cc_surrogate_range task is applied to every pair of neurons. 
=== Version 4 ===
''range'', where the cc_surrogate_range task is applied to a range of neurons.

== Files ==
These are the files provided in this application package:

src/ 

 tejedor_neuron_correlation_pycompss/

  tejedor_neuron_correlation_pycompss.py  -> UP task code

  nsdataproc/

   analysis_params.py

   experiment_params.py

   ___init__.py

   ns_data_proc_objects.py -> PyCOMPSs app main program
 basic/
   neurons.py
 oneNeuron/
   neurons.py
 range/
   neurons.py


config/

 task_requirements.txt -> numpy dependency for the task

 compss_module -> COMPSs environment module for the task


data/

 spikes_small.dat -> neuron data


== Development instructions ==
This task has been developed following the instructions at this URL (it can only be accessed by first starting a connection to the EPFL VPN):

https://developer.humanbrainproject.eu/docs/projects/task-sdk/0.0.14/tutorial.html

The steps include:
1. Create a UP task using the skeleton provided by EPFL
2. Test the task locally
3. Submit the task for git review
4. Register the task on the portal, specifying package dependencies with a task_requirements.txt file

When creating a UP task that runs a PyCOMPSs application, the UP task needs to invoke the pycompss_launch method of the PyCOMPSs library. The parameters of this launch method are (i) a function that contains the main program of the PyCOMPSs application and (ii) the arguments of that function.

As an example, this is the relevant code of the Neuro-Science Data Processing task:

from pycompss.runtime.launch import pycompss_launch
from nsdataproc.ns_data_proc_objects import ns_data_processing

result = pycompss_launch(app = ns_data_processing, args = (fspikes, num_frags), kwargs = {})


== Execution instructions ==
The first thing to do is getting an account in the Unified Portal.

Once this is done, the user can log in at:

https://up.humanbrainproject.eu

The user dashboard will then show up. First upload the neuron data to the UP: click on "Upload data" to upload the spikes_small.dat file.

After that, in order to launch the task, click on "TOOLS" and choose the neuro-science task from the list (tejedor_neuron_correlation_pycompss). Then click on "Run" and a window will pop up to run the task. At this point, you need to select the execution cluster ('epfl_viz'), select the neuron data file previously uploaded, specify the number of fragments (e.g. 10) and select the output folder.

The results of the task can be checked in the "JOBS" section of the UP.


== Execution details ==
As of 21/01/2015, the COMPSs 1.2 release is only installed in one node of the EPFL visualization cluster (bbplxviz05.epfl.ch). The resource description files (resources.xml and project.xml) are located in the folder /opt/COMPSs/infrastructure, and they are configured to only use that node. In order to test the Neuro-science Data Processing task, bbplxviz05.epfl.ch needs to be selected when running the task, but currently only an entire cluster can be selected. EPFL still needs to provide a solution for that issue. Once this works, COMPSs could be installed in the whole cluster.

Regarding the PyCOMPSs environment variables, they are set up via a COMPSs environment module that has already been provided to EPFL. It is important to remind the EPFL team that they need to associate that environment module to the Neuro-science Data Processing task (and to any PyCOMPSs tasks that might be developed in the future), so that it is loaded before the task is run. 

== Alternatively Execution instructions ==
Usage:
runcompss neurons.py <fspikes> <num_frags> 

where:
                 * - fspikes: File data input
                 * - num_frags : Number of fragments