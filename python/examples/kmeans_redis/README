This is the Readme for:
Kmeans with Redis

[Name]: kmeans_redis
[Contact Person]: support-compss@bsc.es
[License Agreement]: Apache2
[Platform]: COMPSs

[Body]
== Description ==
Kmeans clustering using persistent storage (Redis).


== Execution instructions ==

* Usage in local machine:

    ./run_local.sh <TRACING> -n <NUM_POINTS> -d <DIMENSIONS> -c <CENTRES> -f <FRAGMENTS>

    - Where:
        <TRACING>............... Enable or disable tracing ( true | false )
        <NUM_POINTS>............ Number of points
        <DIMENSIONS>............ Number of dimensions
        <CENTRES>............... Number of centres
        <FRAGMENTS>............. Number of fragments

     - Other available options:
         -s <SEED>.............. Define a seed
         -m <MODE>.............. Distribution of points ( uniform | normal )
         -i <ITERATIONS>........ Maximum number of iterations
         -e <EPSILON>........... Epsilon value. Convergence value.
         -l <NORM>.............. Norm for vectors ( l1 | l2 )
         --plot_result.......... Plot the resulting clustering (only for 2D)

     - Example: ./run_local.sh false 160 3 4 4

     - If the execution is expected to be done without Redis, use the same parameters
       using the run_local_less.sh script.

* Usage in supercomputer:

    ./launch.sh <JOB_DEPENDENCY> <NUM_NODES> <EXECUTION_TIME> <TRACING> -n <NUM_POINTS> -d <DIMENSIONS> -c <CENTRES> -f <FRAGMENTS>

    - Where:
        <JOB_DEPENDENCY>........ Job dependency (run after the given jobid - None if not needed)
        <NUM_NODES>............. Number of nodes for the reservation
        <EXECUTION_TIME>........ Walltime
        <TRACING>............... Enable or disable tracing ( true | false )
        <NUM_POINTS>............ Number of points
        <DIMENSIONS>............ Number of dimensions
        <CENTRES>............... Number of centres
        <FRAGMENTS>............. Number of fragments

     - Other available options:
         -s <SEED>.............. Define a seed
         -m <MODE>.............. Distribution of points ( uniform | normal )
         -i <ITERATIONS>........ Maximum number of iterations
         -e <EPSILON>........... Epsilon value. Convergence value.
         -l <NORM>.............. Norm for vectors ( l1 | l2 )
         --plot_result.......... Plot the resulting clustering (only for 2D)

    - Example: ./launch.sh None 2 10 true 1 4 512 8

== Build ==
No build is required
