! *** V.IMP...READ the "readme_postall_files" (text file) for imp info on this program.

! *** Only the 'kount' variable needs to be changed to read the desired nmm_b_history.ttt files ***

! IN  Sigma units....64 layers...with GLAT/GLON, LEV, Time computed here..Original program postall.f ...this one created by Malcolm to write to netcdf

! To compile in MN:  xlf postall_global.f -L/gpfs/apps/NETCDF/64/lib -lnetcdf -lm -I/gpfs/apps/NETCDF/64/include -o postall_global.exe
! To compile in VAPOR:  xlf postall_global_sigm_v200812_tracers.f -L/usrx/local/netcdf.3.5.0/lib -lnetcdf -lm -I/usrx/local/netcdf.3.5.0/include/ -o postall_global.exe

! Modificado por Sara Basart hasta el 4 de Junio de 2012
! Modificado por Francesc Martinez desde el 4 de Junio de 2012


      PROGRAM postall_netcdf_pressure
!     Sue√±o irrealizable:
!      implicit none
      INCLUDE 'netcdf.inc'
      include './lmimjm.inc'
!      INCLUDE '/usrx/local/netcdf.3.5.0/include/netcdf.inc'

!        call do_extraction(289, 211, 24)
!      end
!
!      subroutine do_extraction(im, jm, lm)
!      integer im, jm, lm

!----------For Netcdf File Declaration of Dimensions-------------------------
!Declaracion de variables:
      integer LATDIM_ID, LONGDIM_ID, LEVDIM_ID, TIMDIM_ID  !,
!     &        NWETSDIM_ID, NAERODIM_ID

!--------Declaration of Coordinate variables-------------------------

      integer LATVAR_ID, LONGVAR_ID, LEVVAR_ID, TIMVAR_ID

! S'ha de reordenar la definicio de variables_ID en funcio del tipus d'output
! Ara mateix es una mica caos....
!----------4-Dimensional Netcdf variables with (im,jm,lsm,time)-------------

      integer HSL_ID, TSL_ID, QSL_ID, USL_ID, VSL_ID
     &        CWSL_ID, Q2SL_ID, WSL_ID

      integer DUST_CONC_ID, T2_ID, MAXT2_ID, MINT2_ID, PS_ID, 
     &        PSHLTR_ID, DUST_SCONC_ID, DUST_SCONC02_ID,
     &        DUST_SCONC10_ID, DUST_PM10_SCONC10_ID, 
     &        DUST_PM25_SCONC10_ID, DUST_EXT_550_SFC_ID

!----------4-Dimensional Netcdf variables with (nwets,im,jm,time)-----------

      integer TG_ID, WG_ID, AERO_ACPREC_ID, AERO_CUPREC_ID,
     &        DUST_WETDEP_ACPREC_ID, DUST_WETDEP_CUPREC_ID,
     &        AERO_CUPREC_TOT_ID, AERO_DEPDRY_ID, AERO_DLOAD_ID,
     &        DUST_EXT_550_ID, DUST_DRYDEP_ID, DUST_LOAD_ID,
     &        EMI_DUST_ID, DUST_EMI_ID

!----------3-Dimensional Netcdf variables (im,jm,time)---------------------

      integer SLP_ID, FIS_ID, PD_ID, THS_ID, QS_ID, PINTS_ID,
     &        SNO_ID, ROF_ID, USTAR_ID, AKHS_ID, AKMS_ID,
     &        ACPREC_ID, CUPREC_ID, U10_ID, V10_ID, TH10_ID,
     &        Q10_ID, TH02_ID, Q02_ID, SLWD_ID, SSW_ID, THZ0_ID,
     &        QZ0_ID, Z0_ID, SM_ID, SICE_ID, SST_ID, INSOIL_ID,
     &        INVEG_ID, VEGFRC_ID, ALBEDO_ID, EPSR_ID, ACFRCV_ID,
     &        ACFRST_ID, ALBASE, ALWIN_ID, ALWOUT_ID, ALWTOA_ID,
     &        ASWIN_ID, ASWOUT_ID, ASWTOA_ID, BGROFF_ID, CFRACH_ID,
     &        CFRACL_ID, CFRACM_ID, CLDEFI_ID, CMC_ID, CNVBOT_ID,
     &        CNVTOP_ID, CPRATE_ID, CUPPT_ID, CZEN_ID, CZMEAN_ID,
     &        MXSNAL_ID, RADOT_ID, RLWIN_ID, RLWTOA_ID, RSWIN_ID,
     &        RSWINC_ID, RSWOUT_ID, SFCLHX_ID, SFCSHX_ID, SIGT4_ID

! GLAT/GLON are the geographic lat/lon where GLAT(i)=sbd+(i-1)*dphd & GLON(i)=wbd+(i-1)*dlmd, here 'i' is the array index. For lat, i=1 to jm ; for lon, i=1 to im

      real    GLAT(im,jm), GLON(im,jm), LAT(im,jm), LON(im,jm),
     &        VLAT(im,jm), VLON(im,jm), south_north(jm), west_east(im)


      integer GLATVAR_ID,GLONVAR_ID, PDTOP_ID

      integer NCID, STATUS, DIMID_1(4), DIMID_2(3), DIMID_3(4), 
     &        DIMID_4(1), DIMID_5(1), DIMID_6(1), DIMID_7(1),
     &        DIMID_8(2), DIMID_9(2), DIMID_10(4)
      integer time_step
      parameter (kps=8)
      character varname

      CHARACTER*28 global_title
      CHARACTER*9  global_title2
      CHARACTER*19 global_title1
      CHARACTER*2  gt1, gt2, gt4, gt5
      CHARACTER*1  gt6, gt7
      CHARACTER*4  gt3
      CHARACTER*250 file_name_out,temp_path
      CHARACTER*250 path_in, path_out, binary_name, output_name


      integer start(4), count(4)
      integer bin, b_im, b_jm, b_lm
      integer start_3(3),  count_3(3),  start_w(4),    count_w(4),
     &        start_sl(4), count_sl(4), start_aero(4), count_aero(4)

      integer dust_load_bin_ids(kps), dust_wetdep_acprec_bin_ids(kps),
     &        dust_wetdep_cuprec_bin_ids(kps), dust_drydep_bin_ids(kps),
     &        dust_emi_bin_ids(kps), dust_sconc_bin_ids(kps),
     &        dust_aod550_bin_ids(kps)

! attribute vectors
      real    fill_value

! ******** END OF NETCDF VARIABLES/DIMENSIONS DECLARATION *****************

!     ******************************************************************
!     *                                                                *
!     *  this is the program for writing in hybrid system              *
!     *                                                                *
!     *  programers - z. janjic, d. jovic, s. nickovic                 *
!     *  february 1981 - march 1998                                    *
!     *                                                                *
!     ******************************************************************
!-----------------------------------------------------------------------

!-----------------------------------------------------------------------
      parameter (lsm=17)
      parameter (iwest=0, ieast=0, jnorth=0, jsouth=0)
      parameter (imb=im-iwest-ieast, jmb=jm-jnorth-jsouth)
      integer   dims_3d(3), dims_w(3), dims_bin(3)
      integer   pres(lsm), time_value(1)           ! LEV (lm) is defined here as 1 to 64
      integer   rev_pres(lsm-2)

!-----------------------------------------------------------------------
      parameter ( nsmud = 10, lp2 = lm + 2)
      parameter ( r = 287.04, cp = 1004.6, g = 9.8, dtdz = 0.0063,
     &          eps = 1.e-5, gor = g / r,
!     & dtdz=0.008,eps=1.e-5,gor=g/r
     &          rgdt = dtdz * r / g, rdtdz = 1. / dtdz )
!-----------------------------------------------------------------------
      logical   run,global

      dimension idat(3),    dsg1(lm),   dsg2(lm),  sgml1(lm), sgml2(lm),
     &          sgm(lm+1),  sg1(lm+1),  sg2(lm+1),  ztt(lm+1),
     &          tcol(lm+1), qcol(lm+1), cwcl(lm+1), dcol(lm+1),
     &          zth(lm+2),  hcol(lm+2), pcol(lm+2), q2cl(lm+2)

      dimension ztw(lm+1),  ucol(lm+1), vcol(lm+1), wcol(lm+1),
     &          dwcl(lm+1), rcol(lm+1), cldfracol(lm+1), rlwttcol(lm+1),
     &          rswttcol(lm+1), f_icecol(lm+1), f_rimefcol(lm+1),
     &          f_raincol(lm+1)

      dimension dustcol(lm+1), y2(lm+2),  phld(lm+2),  qhld(lm+2),
     &          ppsl(lsm),   alsl(lsm),   ztsl(lsm),   ovrlx (lsm),
     &          tcolsl(lsm), qcolsl(lsm), cwclsl(lsm), dcolsl(lsm),
     &          hcolsl(lsm), pcolsl(lsm), q2clsl(lsm)

      dimension ucolsl(lsm), vcolsl(lsm), wcolsl(lsm), rcolsl(lsm),
     &          dwclsl(lsm), cldfracolsl(lsm), rlwttcolsl(lsm),
     &          rswttcolsl(lsm), f_icecolsl(lsm), f_rimefcolsl(lsm),
     &          f_raincolsl(lsm)

      dimension dustcolsl(lsm), hcol5(5), pcol5(5), y25(5), slp(im,jm)

      dimension fis(im,jm), pd(im,jm),    pints(im,jm), tmask(im,jm),
     &          hs(im,jm),  rtsl(im,jm),  tsll(im,jm),  osll(im,jm),
     &          qsll(im,jm), cwll(im,jm), dvll(im,jm),  hsll(im,jm),
     &          psll(im,jm), q2ll(im,jm), dwll(im,jm),  wsll(im,jm),
     &          rsll(im,jm), dustsll(im,jm), qext350(8), qext450(8),
     &          qext500(8), qext650(8), qext800(8), qext900(8), 
     &          qext550(8), r_dust_e(8), rho_dust(8)

      dimension t(im,jm,lm), q(im,jm,lm), cw(im,jm,lm), q2(im,jm,lm),
     &          u(im,jm,lm), v(im,jm,lm), xlen_mix(im,jm,lm),
     &          dwdt(im,jm,lm), w(im,jm,lm), zet(im,jm,lm+1),
     &          pint(im,jm,lm+1), rrw(im,jm,lm), tracers(im,jm,lm),
     &          dust(im,jm,lm), dust_bins(im,jm,kps), ths(im,jm),
     &          qs(im,jm), sh20(im,jm,nwets), wg(nwets,im,jm), 
     &          wgt(im,jm,nwets), sno(im,jm), rof(im,jm), ustar(im,jm),
     &          akhs(im,jm), akms(im,jm), acprec(im,jm), cuprec(im,jm),
     &          acsnom(im,jm), acsnow(im,jm), u10(im,jm), v10(im,jm),
     &          u10_h(im,jm), v10_h(im,jm), uz0(im,jm), vz0(im,jm),
     &          th10(im,jm), q10(im,jm), qsh(im,jm),th02(im,jm),
     &          q02(im,jm), twbs(im,jm), qwbs(im,jm), slwd(im,jm),
     &          ssw(im,jm), dust_aod550_bin(im,jm,kps), thz0(im,jm),
     &          qz0(im,jm), z0(im,jm), dust_aod550(im,jm),
     &          dust_aod350(im,jm), dust_aod450(im,jm),
     &          dust_aod500(im,jm), dust_aod650(im,jm),
     &          dust_aod800(im,jm), dust_aod900(im,jm),
     &          dust_ext550_sfc(im,jm), t2(im,jm), maxt2(im,jm),
     &          mint2(im,jm), ps(im,jm), pshltr(im,jm), 
     &          dust_sconc(im,jm), si(im,jm), smstav(im,jm),
     &          smstot(im,jm), snopcx(im,jm), soiltb(im,jm), sr(im,jm),
     &          subshx(im,jm), st_2d(im,jm), sm(im,jm), sice(im,jm),
     &          sst(im,jm), insoil(im,jm), inveg(im,jm), vegfrc(im,jm),
     &          tg(nwets,im,jm), tgt(im,jm,nwets), albedo(im,jm),
     &          epsr(im,jm), grnflx(im,jm), hbots(im,jm), hbotd(im,jm),
     &          htops(im,jm), htopd(im,jm), aero_acprec(8,im,jm),
     &          aero_cuprec(8,im,jm), dust_wetdep(im,jm),
     &          aero_cuprec_tot(im,jm), aero_depdry(8,im,jm),
     &          dload(8,im,jm), dust_drydep(im,jm), dust_load(im,jm),
     &          dust_ext(im,jm,lm), emiss_dust(8,im,jm), 
     &          dust_emi(im,jm), dust02(8,im,jm), dust_sconc02(im,jm),
     &          dust10(8,im,jm), dust_sconc10(im,jm),
     &          dust_pm10_sconc10(im,jm), dust_pm25_sconc10(im,jm),
     &          acfrcv(im,jm), acfrst(im,jm), albase(im,jm), 
     &          alwin(im,jm), alwout(im,jm), alwtoa(im,jm),
     &          aswin(im,jm), aswout(im,jm), aswtoa(im,jm),
     &          bgroff(im,jm), cfrach(im,jm), cfracl(im,jm),
     &          cfracm(im,jm), cldefi(im,jm), cmc(im,jm), cnvbot(im,jm),
     &          cnvtop(im,jm), cprate(im,jm), cuppt(im,jm), czen(im,jm),
     &          czmean(im,jm), mxsnal(im,jm), radot(im,jm),
     &          rlwin(im,jm), rlwtoa(im,jm), rswin(im,jm),
     &          rswinc(im,jm), rswout(im,jm), sfcevp(im,jm),
     &          sfcexc(im,jm), sfclhx(im,jm), sfcshx(im,jm),
     &          sigt4(im,jm), pblh(im,jm), potevp(im,jm), prec(im,jm),
     &          exch_h(im,jm,lm), cldfra(im,jm,lm), rlwtt(im,jm,lm),
     &          rswtt(im,jm,lm), f_ice(im,jm,lm), f_rimef(im,jm,lm),
     &          f_rain(im,jm,lm), omgalf(im,jm,lm), tcucn(im,jm,lm),
     &          train(im,jm,lm)

      dimension tsl(im,jm,lsm), osl(im,jm,lsm), qsl(im,jm,lsm), 
     &          cwsl(im,jm,lsm), hsl(im,jm,lsm), psl(im,jm,lsm),
     &          q2sl(im,jm,lsm), usl(im,jm,lsm), vsl(im,jm,lsm),
     &          usl_h(im,jm,lsm), vsl_h(im,jm,lsm), wsl(im,jm,lsm),
     &          dwsl(im,jm,lsm), rsl(im,jm,lsm), cldfrasl(im,jm,lsm),
     &          rlwttsl(im,jm,lsm), rswttsl(im,jm,lsm),
     &          f_icesl(im,jm,lsm), f_rimefsl(im,jm,lsm),
     &          f_rainsl(im,jm,lsm), dustsl(im,jm,lsm)

!---------------------------------------------
      character*75 fname,vrblfile,fname_dust
      data fname/'                                                     
     &          '/
      data fname_dust/'
     &               '/
      data vrblfile/'                                                  
     &             '/
      real pdtop, dummy_real
      data y2/lp2*0./
!----------------------------------------------------------------------
      data ppsl/ 10000., 20000., 25000., 30000., 40000.,
     &           50000., 60000., 70000., 80000., 85000.,
     &           90000., 92500., 95000., 97500., 100000., 
     &           102500., 105000./
!CPEREZ3     & ppsl/10000.,20000.,25000.,30000.,35000.,40000.,45000.
!CPEREZ3     &     ,50000.,52500.,55000.,57500.,60000.,62500.,65000.,67500.
!CPEREZ3     &     ,70000.,72500.,75000.,77500.,80000.,82500.,85000.,87500.
!CPEREZ3     &     ,90000.,92500.,95000.,97500.,100000.,102500.,105000./

!-----------------------------------------------------------------------
      data ovrlx/lsm*0.190/
!-----------------------------------------------------------------------
!!!CPEREZ4
!-----------------------------------------------------------------------
      data qext350/3.065,3.759,2.429,2.347,2.223,2.174,2.119,2.078/
      data qext450/2.062,3.881,2.599,2.494,2.315,2.199,2.137,2.092/
      data qext500/1.697,3.647,2.894,2.495,2.268,2.210,2.156,2.100/
      data qext550/1.373,3.303,3.245,2.413,2.262,2.260,2.162,2.108/ !carlos logn 
      data qext650/0.834,2.675,3.738,2.212,2.482,2.224,2.170,2.118/
      data qext800/0.445,1.800,3.835,2.568,2.471,2.352,2.184,2.129/
      data qext900/0.308,1.401,3.597,3.077,2.373,2.239,2.263,2.137/
      data r_dust_e/0.15E-6,0.25E-6,0.45E-6,0.78E-6,1.32E-6,2.24E-6
     &       ,3.80E-6,7.11E-6/ !dust volume radius (microns)
      data rho_dust/2500.,2500.,2500.,2500.,2650.,2650.,2650.,2650./


!-----------------------------------------------------------------------
! Primero declaramos las opciones de configuracion:
!-----------------------------------------------------------------------
      integer reverse_presure
      ! Forecast domain configuration variables:
      character(4) CFG_IYEAR, CFG_IMONTH, CFG_IDAY, CFG_IHOUR,
     &        CFG_IMINUTE, CFG_SECOND, CFG_NF_HOURS,
     &        CFG_NF_MINUTES, CFG_NF_SECONDS, CFG_IM, CFG_JM,
     &        CFG_LM, CFG_IHRST, CFG_IDAT, 
     &        CFG_MP_PHYSICS, CFG_SF_SURFACE_PHYSICS, CFG_PT,
     &        CFG_TLMOD, CFG_TPH0D, CFG_TSTART, CFG_DPHD, CFG_DLMD,
     &        CFG_DHX, CFG_GLOBAL, CFG_RUN, CFG_ADIABATIC, CFG_INSOIL,
     &        CFG_INVEG, CFG_GLAT, CFG_GLON, CFG_VLAT, CFG_VLON,
     &        CFG_VEGFRC
      character(4) CFG_NPHS, CFG_NHEAT, CFG_NCLOUD, CFG_NPREC,
     &        CFG_NRDLW, CFG_NRDSW,CFG_NSRFC, CFG_DT, CFG_DYH, CFG_PDTOP

      ! Mas unassigned variables:
      character(4) CFG_SG1, CFG_SG2, CFG_DSG1, CFG_DSG2, CFG_SGML1,
     &        CFG_SGML2, CFG_APHTIM, CFG_ARDLW, CFG_ARDSW, CFG_ASRFC,
     &        CFG_AVCNVC, CFG_AVRAIN, CFG_SLDPTH,
     &        CFG_NCFRCV, CFG_NCFRST

      ! Primeras variables meteo:
      character(4) CFG_FIS, CFG_PD, CFG_W, CFG_DWDT, CFG_PINT, 
     &        CFG_PS, CFG_OMGALF, CFG_RRW, CFG_ACFRCV, CFG_ACFRST,
     &        CFG_ACPREC, CFG_ACSNOM, CFG_ACSNOW, CFG_AKHS, CFG_AKMS, 
     &        CFG_ALBASE, CFG_ALBEDO, CFG_ALWIN, CFG_ALWOUT,
     &        CFG_ALWTOA, CFG_ASWIN, CFG_ASWOUT, CFG_ASWTOA, CFG_BGROFF,
     &        CFG_CFRACH, CFG_CFRACL, CFG_CFRACM, CFG_CLDEFI, CFG_CMC,
     &        CFG_CNVBOT, CFG_CNVTOP, CFG_CPRATE,
     &        CFG_CUPPT, CFG_CUPREC, CFG_CZEN, CFG_CZMEAN, CFG_EPSR, 
     &        CFG_GRNFLX, CFG_HBOTD, CFG_HBOTS, CFG_HTOPD, CFG_HTOPS, 
     &        CFG_MXSNAL, CFG_PBLH, CFG_POTEVP, CFG_PREC, CFG_PSHLTR,
     &        CFG_Q10, CFG_QSH, CFG_Q02, CFG_QWBS, CFG_QZ0,  
     &        CFG_RADOT, CFG_RLWIN, CFG_RLWTOA, CFG_RSWIN, CFG_RSWINC,
     &        CFG_RSWOUT, CFG_SFCEVP, CFG_SFCEXC, CFG_SFCLHX,
     &        CFG_SFCSHX, CFG_SI, CFG_SICE, CFG_SIGT4, CFG_SM,
     &        CFG_SMSTAV, CFG_SMSTOT, CFG_SNO, CFG_SNOPCX,
     &        CFG_SOILTB, CFG_SR, CFG_ROF, CFG_SST, CFG_SUBSHX,
     &        CFG_ST_2D, CFG_TH10, CFG_THS, CFG_THZ0, CFG_TH02,
     &        CFG_TWBS, CFG_U10, CFG_USTAR, CFG_UZ0, CFG_V10,  
     &        CFG_VZ0, CFG_Z0, 
     &        CFG_T2, CFG_MAXT2, CFG_MINT2, CFG_CLDFRA, CFG_CW,
     &        CFG_EXCH_H, CFG_Q, CFG_Q2, CFG_RLWTT, CFG_RSWTT,
     &        CFG_T, CFG_TCUCN, CFG_TRAIN, CFG_U, CFG_V,
     &        CFG_XLEN_MIX, CFG_F_ICE, CFG_F_RIMEF, CFG_F_RAIN, 
     &        CFG_SH20, CFG_WGT, CFG_TGT
      ! Variables AERO:
      character(4) CFG_AERO_ACPREC, CFG_AERO_CUPREC, CFG_AERO_DEPDRY,
     &        CFG_DUST_EXT_550, CFG_AERO_DLOAD, CFG_AERO_EMI_DUST,
     &        CFG_AERO_DUST02, CFG_AERO_DUST10, CFG_AERO_TRACERS,
     &        CFG_AERO_AOD_550

      ! Variables de salida (aero):
      character(4) CFG_HSL, CFG_SLP, CFG_QS,
     &        CFG_SLWD, CFG_SSW, CFG_DUST_CONC,
     &        CFG_DUST_LOAD_BIN, CFG_DUST_EMI_BIN,
     &        CFG_DUST_AOD_350, CFG_DUST_AOD_450, CFG_DUST_AOD_500,
     &        CFG_DUST_AOD_550, CFG_DUST_AOD_650, CFG_DUST_AOD_800,
     &        CFG_DUST_AOD_900, CFG_DUST_EXT_550_SFC, CFG_DUST_SCONC,
     &        CFG_DUST_SCONC02, CFG_DUST_SCONC10, CFG_DUST_PM10_SCONC10,
     &        CFG_DUST_PM25_SCONC10,
     &        CFG_DUST_WETDEP_ACPREC, CFG_DUST_WETDEP_CUPREC,
     &        CFG_DUST_DRYDEP, CFG_DUST_LOAD, CFG_DUST_EMI,
     &        CFG_DUST_DRYDEP_BIN, CFG_DUST_WETDEP_ACPREC_BIN,
     &        CFG_DUST_WETDEP_CUPREC_BIN, CFG_DUST_AOD_550_BIN,
     &        CFG_DUST_SCONC_BIN


!-----------------------------------------------------------------------
! Aqui vamos a leer las opciones de configuracion:
!-----------------------------------------------------------------------
      namelist / FILENAMES / binary_name, output_name, path_in, path_out
      namelist / CONFIG / reverse_presure, fill_value

      namelist / F_CFG / CFG_IYEAR, CFG_IMONTH, CFG_IDAY, CFG_IHOUR,
     &        CFG_IMINUTE, CFG_SECOND, CFG_NF_HOURS,
     &        CFG_NF_MINUTES, CFG_NF_SECONDS, CFG_IM, CFG_JM,
     &        CFG_LM, CFG_IHRST, CFG_IDAT,
     &        CFG_MP_PHYSICS, CFG_SF_SURFACE_PHYSICS, CFG_PT,
     &        CFG_TLMOD, CFG_TPH0D, CFG_TSTART, CFG_DPHD, CFG_DLMD,
     &        CFG_DHX, CFG_GLOBAL, CFG_RUN, CFG_ADIABATIC, CFG_INSOIL,
     &        CFG_INVEG, CFG_GLAT, CFG_GLON, CFG_VLAT, CFG_VLON,
     &        CFG_VEGFRC

      namelist / M_CFG/ CFG_NPHS, CFG_NHEAT, CFG_NCLOUD, CFG_NPREC,
     &        CFG_NRDLW, CFG_NRDSW, CFG_NSRFC, CFG_DT, CFG_DYH,
     &        CFG_PDTOP, CFG_SG1, CFG_SG2, CFG_DSG1, CFG_DSG2,
     &        CFG_SGML1, CFG_SGML2, CFG_APHTIM, CFG_ARDLW, CFG_ARDSW,
     &        CFG_ASRFC, CFG_AVCNVC, CFG_AVRAIN, CFG_SLDPTH,
     &        CFG_NCFRCV, CFG_NCFRST, CFG_FIS, CFG_PD, CFG_W, CFG_DWDT,
     &        CFG_PINT, CFG_PS, CFG_OMGALF, CFG_RRW, CFG_ACFRCV,
     &        CFG_ACFRST, CFG_ACPREC, CFG_ACSNOM, CFG_ACSNOW, CFG_AKHS,
     &        CFG_AKMS, CFG_ALBASE, CFG_ALBEDO, CFG_ALWIN, CFG_ALWOUT,
     &        CFG_ALWTOA, CFG_ASWIN, CFG_ASWOUT, CFG_ASWTOA, CFG_BGROFF,
     &        CFG_CFRACH, CFG_CFRACL, CFG_CFRACM, CFG_CLDEFI, CFG_CMC,
     &        CFG_CNVBOT, CFG_CNVTOP, CFG_CPRATE,
     &        CFG_CUPPT, CFG_CUPREC, CFG_CZEN, CFG_CZMEAN, CFG_EPSR, 
     &        CFG_GRNFLX, CFG_HBOTD, CFG_HBOTS, CFG_HTOPD, CFG_HTOPS, 
     &        CFG_MXSNAL, CFG_PBLH, CFG_POTEVP, CFG_PREC, CFG_PSHLTR,
     &        CFG_Q10, CFG_QSH, CFG_Q02, CFG_QWBS, CFG_QZ0,  
     &        CFG_RADOT, CFG_RLWIN, CFG_RLWTOA, CFG_RSWIN, CFG_RSWINC,
     &        CFG_RSWOUT, CFG_SFCEVP, CFG_SFCEXC, CFG_SFCLHX,
     &        CFG_SFCSHX, CFG_SI, CFG_SICE, CFG_SIGT4, CFG_SM,
     &        CFG_SMSTAV, CFG_SMSTOT, CFG_SNO, CFG_SNOPCX,
     &        CFG_SOILTB, CFG_SR, CFG_ROF, CFG_SST, CFG_SUBSHX,
     &        CFG_ST_2D, CFG_TH10, CFG_THS, CFG_THZ0, CFG_TH02,
     &        CFG_TWBS, CFG_U10, CFG_USTAR, CFG_UZ0, CFG_V10,  
     &        CFG_VZ0, CFG_Z0, 
     &        CFG_T2, CFG_MAXT2, CFG_MINT2, CFG_CLDFRA, CFG_CW,
     &        CFG_EXCH_H, CFG_Q, CFG_Q2, CFG_RLWTT, CFG_RSWTT,
     &        CFG_T, CFG_TCUCN, CFG_TRAIN, CFG_U, CFG_V,
     &        CFG_XLEN_MIX, CFG_F_ICE, CFG_F_RIMEF, CFG_F_RAIN, 
     &        CFG_SH20, CFG_WGT, CFG_TGT

      namelist / A_CFG / CFG_DUST_AOD_550, CFG_AERO_ACPREC,
     &        CFG_AERO_CUPREC, CFG_AERO_DEPDRY, CFG_DUST_EXT_550,
     &        CFG_AERO_DLOAD, CFG_AERO_EMI_DUST, CFG_AERO_DUST02,
     &        CFG_AERO_DUST10,CFG_AERO_TRACERS, CFG_HSL, CFG_SLP,
     &        CFG_QS, CFG_SLWD, CFG_SSW, CFG_DUST_CONC,
     &        CFG_DUST_AOD_350, CFG_DUST_AOD_450, CFG_DUST_AOD_500,
     &        CFG_DUST_AOD_550, CFG_DUST_AOD_650, CFG_DUST_AOD_800,
     &        CFG_DUST_AOD_900, CFG_DUST_EXT_550_SFC, CFG_DUST_SCONC,
     &        CFG_DUST_SCONC02, CFG_DUST_SCONC10, CFG_DUST_PM10_SCONC10,
     &        CFG_DUST_PM25_SCONC10,
     &        CFG_DUST_WETDEP_ACPREC, CFG_DUST_WETDEP_CUPREC,
     &        CFG_DUST_DRYDEP, CFG_DUST_LOAD, CFG_DUST_EMI,
     &        CFG_DUST_LOAD_BIN,
     &        CFG_DUST_DRYDEP_BIN, CFG_DUST_WETDEP_ACPREC_BIN,
     &        CFG_DUST_WETDEP_CUPREC_BIN, CFG_DUST_AOD_550_BIN,
     &        CFG_DUST_SCONC_BIN
!     &        CFG_DUST_LOAD_BIN, CFG_DUST_EMI_BIN,


      open(8, FILE='namelist.newpost', STATUS='OLD')
      read(8, FILENAMES)
      read(8, CONFIG)
      read(8, F_CFG)
      read(8, M_CFG)
      read(8, A_CFG)
      print*,' '
      print*,'*** This is writing in PRESSURE ****'
      dims_3d = (/ im, jm, lm /)
      dims_w = (/ im, jm, nwets /)
      dims_bin = (/ kps, im, jm /)
      time_step = 1
!-----------------------------------------------------------------------

!---------- Below block commented----------------------------------------
!zj      vrblfile='/meso/save/wx20zj/umo90/post807/vrbldata'
!zj      open(unit=5,file=vrblfile
!zj     &    ,status='old',access='sequential',form='formatted')
!
! 1000 format('ihrstp=',i2,' kount=',i2,' ninc=',i2)

!      read (5,1000) ihrstp,kount,ninc
!      write(*,1000) ihrstp,kount,ninc
!-----------------------------------------------------------------------

! Kount is the total number of hrs of forecast, presently in multiples of 3. For eg. to read only nmm_b_history.000 file, keep kount = 3 and 'do k=1,kount,3'... to read both nmm_b_history.000 & nmm_b_history.003 files, keep kount = 7 and 'do k=1,kount,3' because the do loop is in steps of 3 hrs..hence after reading nmm.000 file, the next file will be nmm.003 and so on...


      kount=QQQ+1    !! ** Change as reqd, here 6 means 3 files (every 3 hrs) will be created, i.e 000, 003 and 006 hrs

      kount_dust=kount-1
      write(fname_dust,'(a,i3.3)')'nmm_b_dust.',kount_dust

!!! MSPADA
! k=1 and we obtain all the timesteps...
!      do k=16,kount,HIST        ! forecast every 3 hrs beginning with ihr= k-1
      do k=(SSS+1),kount,TTT

        print*,'k forecast counter is ',k
        call get_out_name( 'new_pout_pressure_at_t_', k, 
     &                    file_name_out)
        print*,'Output Netcdf file_name will be ',file_name_out
        ihr = k-1           !! ** IMP ** this is necessary otherwise fname would be nmm_b_history.001 and not .000
        print*,' '
        print*,'** Hi, suphyb is to start processing forecast hour ',ihr
        print'(a,i4.4,a)', TRIM(path_in)// '/' // TRIM(binary_name),ihr,TRIM('h_00m_00.00s')
        write(fname,'(a,i4.4,a)')TRIM(path_in)//'/'//TRIM(binary_name),ihr,TRIM('h_00m_00.00s')

        print*,'fname is ',fname

!-----------------------------------------------------------------------
! Lectura del archivo binario:

      open(unit=31,file=fname
     &    ,status='old',access='sequential',form='unformatted')

!     &    ,convert='BIG_ENDIAN') ! convert='BIG_ENDIAN' added for diff architecture
      ! Inicio de la lectura del archivo binario: variables del dominio.
      call verified_read0i(31, CFG_IYEAR, iyear)
      call verified_read0i(31, CFG_IMONTH, imonth)
      call verified_read0i(31, CFG_IDAY, iday)
      call verified_read0i(31, CFG_IHOUR, ihour)
      call verified_read0i(31, CFG_IMINUTE, iminute)
      call verified_read0r(31, CFG_SECOND, second)
      call verified_read0i(31, CFG_NF_HOURS, nf_hours)
      call verified_read0i(31, CFG_NF_MINUTES, nf_minutes)
      call verified_read0i(31, CFG_NF_SECONDS, nf_seconds)
      call verified_read0i(31, CFG_IM, b_im)
      call verified_read0i(31, CFG_JM, b_jm)
      call verified_read0i(31, CFG_LM, b_lm)
      call verified_read0i(31, CFG_IHRST, ihrst)
      read(31)!i_par_sta
      read(31)!j_par_sta
      call verified_read0i(31, CFG_NPHS, nphs )
      call verified_read0i(31, CFG_NCLOUD, ncloud )
      call verified_read0i(31, CFG_NHEAT, nheat)
      call verified_read0i(31, CFG_NPREC, nprec )
      call verified_read0i(31, CFG_NRDLW, nrdlw )
      call verified_read0i(31, CFG_NRDSW, nrdsw )
      call verified_read0i(31, CFG_NSRFC, nsrfc)
      read(31)!avgmaxlen
      read(31)!mdrminout
      read(31)!mdrmaxout
      read(31)!mdiminout
      read(31)!mdimaxout
      call verified_read1i(31, CFG_IDAT, idat, 3)
      ! Realizamos algunos calculos derivados...:
      isecond = int(second)
      frac_second = nint((second-real(isecond))*1.e3)

      !print*,'Definicion Forecast'
      ! Ya hemos acabado con la lectura de las variables de dominio.
      ! Ahora empezamos con las que no sabemos que son (4real)
      call verified_read0i(31, CFG_MP_PHYSICS, mp_physics)
      call verified_read0i(31, CFG_SF_SURFACE_PHYSICS,
     &     sf_surface_physics)
      call verified_read0r(31, CFG_DT, dt )
      call verified_read0r(31, CFG_DYH, dyh )
      call verified_read0r(31, CFG_PDTOP, pdtop )
      call verified_read0r(31, CFG_PT, dummy_real) !pt )
      call verified_read0r(31, CFG_TLMOD, dummy_real) !tlmod )
      call verified_read0r(31, CFG_TPH0D, dummy_real) !tph0d )
      call verified_read0i(31, CFG_TSTART, tstart )
      call verified_read0r(31, CFG_DPHD, dummy_real) !dphd )
      call verified_read0r(31, CFG_DLMD, dummy_real) !dlmd )
      call verified_read0r(31, CFG_DHX, dummy_real) !dhx )


      print*,'Parametros leidos'
      ! Son de 1Dimension:
      call verified_read1r( 31, CFG_SG1, sg1, lm+1)
      call verified_read1r( 31, CFG_SG2, sg2, lm+1)
      call verified_read1r( 31, CFG_DSG1, dsg1, lm)
      call verified_read1r( 31, CFG_DSG2, dsg2, lm)
      call verified_read1r( 31, CFG_SGML1, sgml1, lm)
      call verified_read1r( 31, CFG_SGML2, sgml2, lm)
      read(31)!sldpth
      read(31)!massrout
      read(31)!massiout
      print*,'0r'
      call verified_read0i(31, CFG_GLOBAL, global)
      call verified_read0i(31, CFG_RUN, run)
      call verified_read0i(31, CFG_ADIABATIC, adiabatic)
      read(31)!mprate
      
      !print*,'Vamos a empezar 2D'
      call verified_read2r( 31, CFG_INSOIL, insoil, dims_3d)
      print*,'Primer 2r leido'
      call verified_read2r( 31, CFG_INVEG, inveg, dims_3d)

      read(31)   !ncfrcv
      read(31)   !ncfrst
      print*,'FIS'
      call verified_read2r( 31, CFG_FIS, fis, dims_3d)
      call verified_read2r( 31, CFG_GLAT, glat, dims_3d)
      call verified_read2r( 31, CFG_GLON, glon, dims_3d)
      call verified_read2r( 31, CFG_PD, pd, dims_3d)
      call verified_read2r( 31, CFG_VLAT, vlat, dims_3d)
      call verified_read2r( 31, CFG_VLON, vlon, dims_3d)
      call verified_read2r( 31, CFG_ACFRCV, acfrcv, dims_3d)
      call verified_read2r( 31, CFG_ACFRST, acfrst, dims_3d)
      call verified_read2r( 31, CFG_ACPREC, acprec, dims_3d)
!
      call verified_read2r( 31, CFG_ACSNOM, acsnom, dims_3d)
      call verified_read2r( 31, CFG_ACSNOW, acsnow, dims_3d)
      print*,'AKHS'
      call verified_read2r( 31, CFG_AKHS, akhs, dims_3d)
      read(31)!akhsavg
      call verified_read2r( 31, CFG_AKMS, akms, dims_3d)
      read(31)!akmsavg
      call verified_read2r( 31, CFG_ALBASE, albase, dims_3d)
      call verified_read2r( 31, CFG_ALBEDO, albedo, dims_3d)
      call verified_read2r( 31, CFG_ALWIN, alwin, dims_3d)
      call verified_read2r( 31, CFG_ALWOUT, alwout, dims_3d)
      call verified_read2r( 31, CFG_ALWTOA, alwtoa, dims_3d)
      call verified_read2r( 31, CFG_ASWIN, aswin, dims_3d)
      call verified_read2r( 31, CFG_ASWOUT, aswout, dims_3d)
      call verified_read2r( 31, CFG_ASWTOA, aswtoa, dims_3d)
      call verified_read2r( 31, CFG_BGROFF, bgroff, dims_3d)
      call verified_read2r( 31, CFG_CFRACH, cfrach, dims_3d)
      call verified_read2r( 31, CFG_CFRACL, cfracl, dims_3d)
      call verified_read2r( 31, CFG_CFRACM, cfracm, dims_3d)
      call verified_read2r( 31, CFG_CLDEFI, cldefi, dims_3d)
      call verified_read2r( 31, CFG_CMC, cmc, dims_3d)
      call verified_read2r( 31, CFG_CNVBOT, cnvbot, dims_3d)
      call verified_read2r( 31, CFG_CNVTOP, cnvtop, dims_3d)
      call verified_read2r( 31, CFG_CPRATE, cprate, dims_3d)
      call verified_read2r( 31, CFG_CUPPT, cuppt, dims_3d)
      call verified_read2r( 31, CFG_CUPREC, cuprec, dims_3d)
      call verified_read2r( 31, CFG_CZEN, czen, dims_3d)
      call verified_read2r( 31, CFG_CZMEAN, czmean, dims_3d)
      read(31)!DNVVELMAX
      call verified_read2r( 31, CFG_EPSR, epsr, dims_3d)
      call verified_read2r( 31, CFG_GRNFLX, grnflx, dims_3d)
      call verified_read2r( 31, CFG_HBOTD, hbotd, dims_3d)
      call verified_read2r( 31, CFG_HBOTS, hbots, dims_3d)
      call verified_read2r( 31, CFG_HTOPD, htopd, dims_3d)
      call verified_read2r( 31, CFG_HTOPS, htops, dims_3d)
      read(31)!mixht
      call verified_read2r( 31, CFG_MXSNAL, mxsnal, dims_3d)
      call verified_read2r( 31, CFG_PBLH, pblh, dims_3d)
      call verified_read2r( 31, CFG_POTEVP, potevp, dims_3d)
      call verified_read2r( 31, CFG_PREC, prec, dims_3d)
      read(31)!psfcavg
      call verified_read2r( 31, CFG_PSHLTR, pshltr, dims_3d)
      read(31)!rh02max
      read(31)!rh02min
      call verified_read2r( 31, CFG_MAXT2, maxt2, dims_3d)
      call verified_read2r( 31, CFG_MINT2, mint2, dims_3d)
      read(31)!t10
      read(31)!t10avg

      print*,'HBOTD'
      call verified_read2r( 31, CFG_Q10, q10, dims_3d)
      call verified_read2r( 31, CFG_QSH, qsh, dims_3d)
      call verified_read2r( 31, CFG_Q02, q02, dims_3d)
      call verified_read2r( 31, CFG_QWBS, qwbs, dims_3d)
      call verified_read2r( 31, CFG_QZ0, qz0, dims_3d)
      call verified_read2r( 31, CFG_RADOT, radot, dims_3d)
      read(31)!refdmax
      call verified_read2r( 31, CFG_RLWIN, rlwin, dims_3d)
      call verified_read2r( 31, CFG_RLWTOA, rlwtoa, dims_3d)
      call verified_read2r( 31, CFG_RSWIN, rswin, dims_3d)
      call verified_read2r( 31, CFG_RSWINC, rswinc, dims_3d)
      call verified_read2r( 31, CFG_RSWOUT, rswout, dims_3d)
      call verified_read2r( 31, CFG_SFCEVP, sfcevp, dims_3d)
      call verified_read2r( 31, CFG_SFCEXC, sfcexc, dims_3d)
      call verified_read2r( 31, CFG_SFCLHX, sfclhx, dims_3d)
      call verified_read2r( 31, CFG_SFCSHX, sfcshx, dims_3d)
      print*,'SI'
      call verified_read2r( 31, CFG_SI, si, dims_3d)
      call verified_read2r( 31, CFG_SICE, sice, dims_3d)
      call verified_read2r( 31, CFG_SIGT4, sigt4, dims_3d)
      call verified_read2r( 31, CFG_SM, sm, dims_3d)
      call verified_read2r( 31, CFG_SMSTAV, smstav, dims_3d)
      call verified_read2r( 31, CFG_SMSTOT, smstot, dims_3d)
      call verified_read2r( 31, CFG_SNO, sno, dims_3d)
      read(31)!SNOAVG
      call verified_read2r( 31, CFG_SNOPCX, snopcx, dims_3d)
      call verified_read2r( 31, CFG_SOILTB, soiltb, dims_3d)
      call verified_read2r( 31, CFG_SR, sr, dims_3d)
      call verified_read2r( 31, CFG_ROF, rof, dims_3d)
      call verified_read2r( 31, CFG_SST, sst, dims_3d)
      call verified_read2r( 31, CFG_SUBSHX, subshx, dims_3d)
      call verified_read2r( 31, CFG_ST_2D, st_2d, dims_3d)
      call verified_read2r( 31, CFG_TH10, th10, dims_3d)
      call verified_read2r( 31, CFG_THS, ths, dims_3d)
      call verified_read2r( 31, CFG_THZ0, thz0, dims_3d)
      call verified_read2r( 31, CFG_TH02, th02, dims_3d)
      call verified_read2r( 31, CFG_TWBS, twbs, dims_3d)
      read(31)!uphlmax
      read(31)!upvvelmax
      call verified_read2r( 31, CFG_U10, u10, dims_3d)
      read(31)!u10max
      call verified_read2r( 31, CFG_USTAR, ustar, dims_3d)
      call verified_read2r( 31, CFG_UZ0, uz0, dims_3d)
      call verified_read2r( 31, CFG_V10, v10, dims_3d)
      read(31)!v10max
      call verified_read2r( 31, CFG_VEGFRC, vegfrc, dims_3d)
      call verified_read2r( 31, CFG_VZ0, vz0, dims_3d)
      call verified_read2r( 31, CFG_Z0, z0, dims_3d)

      read(31)!potflx
      read(31)!psfc
      read(31)!tlmin
      read(31)!tlmax
      read(31)!lspa
      read(31)!acutim
      read(31)!aphtim
      read(31)!ardlw
      read(31)!ardsw
      read(31)!asrfc
      read(31)!avrain
      read(31)!avcnvc

      call verified_read3r( 31, CFG_W, w, dims_3d) !W
      call verified_read3r( 31, CFG_W, w, dims_3d) !W_TOT
      call verified_read3r( 31, CFG_OMGALF, omgalf, dims_3d)
      call verified_read3r( 31, CFG_RRW, rrw, dims_3d) !O3

! 3D (float/real):
      print*,'CLDFRA'
      call verified_read3r( 31, CFG_CLDFRA, cldfra, dims_3d)
      call verified_read3r( 31, CFG_CW, cw, dims_3d)
      call verified_read3r( 31, CFG_EXCH_H, exch_h, dims_3d)
      call verified_read3r( 31, CFG_Q, q, dims_3d)
      call verified_read3r( 31, CFG_Q2, q2, dims_3d)
      call verified_read3r( 31, CFG_RLWTT, rlwtt, dims_3d)
      call verified_read3r( 31, CFG_RSWTT, rswtt, dims_3d)
      call verified_read3r( 31, CFG_PINT, pint, (/ im, jm, lm+1 /))
      ps = pint(:,:,lm+1)
      call verified_read3r( 31, CFG_DWDT, dwdt, dims_3d)
      call verified_read3r( 31, CFG_T, t, dims_3d)

      call verified_read3r( 31, CFG_TCUCN, tcucn, dims_3d)
      call verified_read3r( 31, CFG_TRAIN, train, dims_3d)

      call verified_read3r( 31, CFG_U, u, dims_3d)
      call verified_read3r( 31, CFG_V, v, dims_3d)
      call verified_read3r( 31, CFG_XLEN_MIX, xlen_mix, dims_3d)

      call verified_read3r( 31, CFG_F_ICE, f_ice, dims_3d)
      call verified_read3r( 31, CFG_F_RIMEF, f_rimef, dims_3d)
      call verified_read3r( 31, CFG_F_RAIN, f_rain, dims_3d)

      call verified_read3r( 31, CFG_SH20, sh20, dims_w)
      call verified_read3r( 31, CFG_WGT, wgt, dims_w)
      call verified_read3r( 31, CFG_TGT, tgt, dims_w)

      print*,'AERO_ACPREC'

      call reverse_read3r(31, CFG_AERO_ACPREC, aero_acprec, dims_bin)
      dust_wetdep = 0.0
      do l=1,8
        dust_wetdep = dust_wetdep + aero_acprec(l,:,:)
      enddo

      call reverse_read3r(31, CFG_AERO_CUPREC, aero_cuprec, dims_bin)

      call reverse_read3r(31, CFG_AERO_DEPDRY, aero_depdry, dims_bin)
      dust_drydep = 0.0
      do l=1,8
        dust_drydep = dust_drydep + aero_depdry(l,:,:)
      enddo

      do l=1,6
        if(l.eq.2)then !dust
          read(31) dust_aod550
        else 
          read(31)!AERO_AOD
        endif
      enddo

      call reverse_read3r(31, CFG_AERO_DLOAD, dload, dims_bin)
      dust_load = 0.0
      do l=1,8
        dust_load = dust_load + dload(l,:,:)
      enddo

      do j=1,jm
        do i=1,im
          dust_aod350(i,j)=0.
          dust_aod450(i,j)=0.
          dust_aod500(i,j)=0.
          dust_aod650(i,j)=0.
          dust_aod800(i,j)=0.
          dust_aod900(i,j)=0.
          do l=1,8
            dust_aod350(i,j)=dust_aod350(i,j)+(dload(l,i,j)
     &           *3.*qext350(l)/(4.*r_dust_e(l)*rho_dust(l)))

            dust_aod450(i,j)=dust_aod450(i,j)+(dload(l,i,j)
     &           *3.*qext450(l)/(4.*r_dust_e(l)*rho_dust(l)))

            dust_aod500(i,j)=dust_aod500(i,j)+(dload(l,i,j)
     &           *3.*qext500(l)/(4.*r_dust_e(l)*rho_dust(l)))

            dust_aod550_bin(i,j,l)=dload(l,i,j)
     &           *3.*qext550(l)/(4.*r_dust_e(l)*rho_dust(l))

            dust_aod650(i,j)=dust_aod650(i,j)+(dload(l,i,j)
     &           *3.*qext650(l)/(4.*r_dust_e(l)*rho_dust(l)))

            dust_aod800(i,j)=dust_aod800(i,j)+(dload(l,i,j)
     &           *3.*qext800(l)/(4.*r_dust_e(l)*rho_dust(l)))

            dust_aod900(i,j)=dust_aod900(i,j)+(dload(l,i,j)
     &           *3.*qext900(l)/(4.*r_dust_e(l)*rho_dust(l)))
          enddo
        enddo
      enddo


      call reverse_read3r(31, CFG_AERO_EMI_DUST, emiss_dust, dims_bin) !EMIS_AERO
      dust_emi=0.0
      do l=1,8
        dust_emi = dust_emi + emiss_dust(l,:,:)
      enddo

      call reverse_read3r(31, CFG_AERO_DUST02, dust02, dims_bin) !AERO02
      dust_sconc02 = 0.0
      do l=1,8
        dust_sconc02 = dust_sconc02 + dust02(l,:,:)
      enddo

      read(31)!ADRYDEP
      read(31)!WETDEP

      do l=1,lm
        read(31)!ph_no2
      enddo


!      call reverse_read3r(31, CFG_AERO_DUST10, dust10, dims_bin)
      dust10=dust02
      dust_sconc10 = 0.0
      do l=1,8
        dust_sconc10 = dust_sconc10 + dust10(l,:,:)
      enddo
      dust_pm10_sconc10 = 0.0

      do l=1,6
        dust_pm10_sconc10 = dust_pm10_sconc10 + dust10(l,:,:)
      enddo
      dust_pm10_sconc10 = dust_pm10_sconc10 + dust10(7,:,:)*0.88

      dust_pm25_sconc10 = 0.0
      do l=1,4
        dust_pm25_sconc10 = dust_pm25_sconc10 + dust10(l,:,:)
      enddo
      dust_pm25_sconc10 = dust_pm25_sconc10 + dust10(5,:,:)*0.385

      print*,'solo faltan tracers'
      num_tracers_total=17
      num_tracers_chem=8
!      num_tracers_total=25
!      num_tracers_chem=16
      dust = 0.0
      salt = 0.0
      dust_bins = 0.0
      salt_bins = 0.0
      if(kount_dust.eq.ihr) then
        open(unit=41,file=fname_dust
     &        ,status='unknown',form='unformatted')
      endif
      do n=5,num_tracers_total
        print*,n
        call verified_read3r( 31, CFG_AERO_TRACERS, tracers, dims_3d)
        if (n>num_tracers_total-num_tracers_chem) then
          if(kount_dust.eq.ihr)then
            write(41)tracers(:,:,l)
          endif
          dust = dust + tracers
          dust_bins(:,:, n-(num_tracers_total-num_tracers_chem)) =
     &           tracers(:,:,lm)
        endif
      enddo
      if(kount_dust.eq.ihr) then
        close(41)
      endif

      dust_sconc=dust(:,:,lm)
      close(31)


! Final de la lectura:

!-----------------------------------------------------------------------
      do l=1,nwets
        tg(l,:,:)=tgt(:,:,l)
      enddo
      do l=1,nwets
        wg(l,:,:)=wgt(:,:,l)
      enddo
!-----------------------------------------------------------------------
! Aixo es podria comentar o treure....
      do l=1,lm
        wmx=-99999999.
        wmn=99999999.
        do j=1,jm
          do i=1,im
            wmx=max(w(i,j,l),wmx)
            wmn=min(w(i,j,l),wmn)
          enddo
        enddo
!      write(*,101)'l=',l,' wmx=',wmx,' wmn=',wmn
! 101  format(a,i5,8(a,f13.5))
      enddo

!!!CPEREZ3
!
      if(.not.global) then
        DO i=1,im
          DO j=1,jm
            LAT(i,j)=VLAT(i,j)*180./3.1415926535897932384626433832795
            LON(i,j)=VLON(i,j)*180./3.1415926535897932384626433832795
          ENDDO
        ENDDO
!-----------------------------------------------------------------------
!***  transform tll wind into tll
!-----------------------------------------------------------------------
!
        do l=1,lm
          do j=1,jm-1
            do i=1,im
              tpus=u(i,j,l)
              tpvs=v(i,j,l)
!!!vectors are located in V points (VLAT,VLON in degrees)
              call tllwin(lon(i,j),lat(i,j),tpus,tpvs,tlm0d,
     &             tph0d,pus,pvs)
              u(i,j,l)=pus
              v(i,j,l)=pvs
            enddo
          enddo
          do i=1,im
            u(i,jm,l)=u(i,jm-1,l)
            v(i,jm,l)=v(i,jm-1,l)
          enddo
        enddo
!-----------------------------------------------------------------------
        DO i=1,im
          DO j=1,jm
            LAT(i,j)=GLAT(i,j)*180./3.1415926535897932384626433832795
            LON(i,j)=GLON(i,j)*180./3.1415926535897932384626433832795
          ENDDO
        ENDDO
!
        do j=1,jm-1
          do i=1,im
             tpus=u10(i,j)
             tpvs=v10(i,j)
!!!u10,v10 are located in H points (GLAT,GLON in degrees)
             call tllwin(lon(i,j),lat(i,j),tpus,tpvs,tlm0d,
     &            tph0d,pus,pvs)
             u10(i,j)=pus
             v10(i,j)=pvs
           enddo
         enddo
         do i=1,im
           u10(i,jm)=u10(i,jm-1)
           v10(i,jm)=v10(i,jm-1)
         enddo
      endif

! FM: Comienzo del parsing de variables:

!-----------------------------------------------------------------------
!***  PRESSURE CONVERSION begins here
!-----------------------------------------------------------------------

      do l=1,lsm
!-----------------------------------------------------------------------
!      alslp=log(ppsl(l))
!      alsl(l)=alslp
!      ztsl(l)=alslp*alslp
!-----------------------------------------------------------------------
        alsl(l)=log(ppsl(l))
        ztsl(l)=ppsl(l)
      enddo
!
      ztbot=ztsl(lsm)
!
!-----------------------------------------------------------------------
!***  mass point variables at pressure levels
!-----------------------------------------------------------------------
!
      do j=1,jm
        do i=1,im
          pdp=pd(i,j)
          hsp=fis(i,j)/g
          hcol(lm+1)=hsp
          hs(i,j)=hsp
!-----------------------------------------------------------------------
!      alp1l=alog(pint(i,j,lm+1))
!      alp2l=(alog(pdp+pdtop+pt))**2
!      zth(lm+1)=alp2l
!-----------------------------------------------------------------------
          zth(lm+1)=sg1(lm+1)*pdtop+sg2(lm+1)*pdp+pt
          pcol(1)=pt
          q2cl(1)=0.
!-----------------------------------------------------------------------
!***  loading values at mid-layers and interfaces
!-----------------------------------------------------------------------
          do ivi=1,lm
            l=lm+1-ivi
!-----------------------------------------------------------------------
!      alp1u=alog(pint(i,j,l))
!      alp2u=(alog(sg1(l)*pdtop+sg2(l)*pdp+pt))**2
!
!      dpd=dsg1(l)*pdtop+dsg2(l)*pdp
!
!      dh=(q(i,j,l)*0.608+1.)*(alp1l-alp1u)*t(i,j,l)*r/g
!     2  *dpd/(pint(i,j,l+1)-pint(i,j,l))
!
!      alpcp=dh*g/(dpd*cp)
!
!      zth(l)=alp2u
!      ztt(l)=(alp2l+alp2u)*0.5
!      ztt(l)=(alog(sgml1(l)*pdtop+sgml2(l)*pdp+pt))**2
!-----------------------------------------------------------------------
            dpd=dsg1(l)*pdtop+dsg2(l)*pdp
!            ppl=sgml1(l)*pdtop+sgml2(l)*pdp+pt
!            dh=(q(i,j,l)*0.608+1.)*t(i,j,l)*dpd*r/(g*ppl)
            ppl=(pint(i,j,l+1)+pint(i,j,l))*0.5
            dh=(q(i,j,l)*0.608-cw(i,j,l)+1.)*t(i,j,l)*dpd*r/(g*ppl)
!            dh=t(i,j,l)*dpd*r/(g*ppl)
            ztt(l)=sgml1(l)*pdtop+sgml2(l)*pdp+pt
            zth(l)=sg1(l)*pdtop+sg2(l)*pdp+pt
!
            tcol(l)=t(i,j,l)
            qcol(l)=q(i,j,l)
!            cwcl(l)=cw(i,j,l)
!            dwcl(l)=dwdt(i,j,l)
!            dcol(l)=div(i,j,l)
!            wcol(l)=w(i,j,l)
!            rcol(l)=rrw(i,j,l)
!
            pcol(l+1)=pint(i,j,l+1)
            q2cl(l+1)=q2(i,j,l)
!
!!! KARSTEN
!            ucol(l)=u(i,j,l)
!            vcol(l)=v(i,j,l)
!            cldfracl(l)=cldfra(i,j,l)
!            rlwttcol(l)=rlwtt(i,j,l)
!            rswttcol(l)=rswtt(i,j,l)
!            f_icecl(l)=f_ice(i,j,l)
!            f_rimecl(l)=f_rimef(i,j,l)
!            f_raincl(l)=f_rain(i,j,l)
!
!            dustexcl(l)=DUST_EXT(i,j,l)
            dustcol(l)=DUST(i,j,l)
!!! KARSTEN
!!!KARSTEN2
!            dust1col(l)=DUST1(i,j,l)
!            dust2col(l)=DUST2(i,j,l)
!            dust3col(l)=DUST3(i,j,l)
!            dust4col(l)=DUST4(i,j,l)
!            dust5col(l)=DUST5(i,j,l)
!            dust6col(l)=DUST6(i,j,l)
!            dust7col(l)=DUST7(i,j,l)
!            dust8col(l)=DUST8(i,j,l)
!!!KARSTEN2
!
            hcol(l  )=hcol(l+1)+dh
!-----------------------------------------------------------------------
!      alp1l=alp1u
!      alp2l=alp2u
!-----------------------------------------------------------------------
          enddo
!-----------------------------------------------------------------------
!***  extrapolation underground for mid-layer variables
!-----------------------------------------------------------------------
          if(ztt(lm).gt.ztbot) then
            ldm=lm
          else
            ldm=lm+1
!
            ztt(lm+1)=ztbot
!
!            d1=(tcol(lm)-tcol(lm-1))/(ztt(lm)-ztt(lm-1))
!            d1=0.
!            x=ztbot-ztt(lm)
!
!            tcol(lm+1)=d1*x+tcol(lm)
!
            tcol(lm+1)=tcol(lm)
     &                *(ppsl(lsm)*2./(pcol(lm)+pcol(lm+1)))**rgdt
!
            qcol(lm+1)=0.
!            cwcl(lm+1)=0.
!            dwcl(lm+1)=1.
!            dcol(lm+1)=0.
!            wcol(lm+1)=0.
!            rcol(lm+1)=0.
!
!!! KARSTEN
!            ucol(lm+1)=0.
!            vcol(lm+1)=0.
!            cldfracl(lm+1)=0.
!            rlwttcol(lm+1)=0.
!            rswttcol(lm+1)=0.
!            f_icecl(lm+1)=0.
!            f_rimecl(lm+1)=0.
!            f_raincl(lm+1)=0.
!
!            dustexcl(lm+1)=0.
            dustcol(lm+1)=0.
!!! KARSTEN
!!!KARSTEN2
!            dust1col(lm+1)=0.
!            dust2col(lm+1)=0.
!            dust3col(lm+1)=0.
!            dust4col(lm+1)=0.
!            dust5col(lm+1)=0.
!            dust6col(lm+1)=0.
!            dust7col(lm+1)=0.
!            dust8col(lm+1)=0.
!!!KARSTEN2
          endif
!
!-----------------------------------------------------------------------
!***  interpolation of mid-layer variables to pressure levels
!-----------------------------------------------------------------------
!
          y2(ldm)=0.
!
          call spline(ldm,ztt,tcol,y2,lsm,ztsl,tcolsl,phld,qhld)
          call spline(ldm,ztt,qcol,y2,lsm,ztsl,qcolsl,phld,qhld)
!          call spline(ldm,ztt,cwcl,y2,lsm,ztsl,cwclsl,phld,qhld)
!          call spline(ldm,ztt,dwcl,y2,lsm,ztsl,dwclsl,phld,qhld)
!          call spline(ldm,ztt,dcol,y2,lsm,ztsl,dcolsl,phld,qhld)
!          call spline(ldm,ztt,wcol,y2,lsm,ztsl,wcolsl,phld,qhld)
!          call spline(ldm,ztt,rcol,y2,lsm,ztsl,rcolsl,phld,qhld)
!
!!! KARSTEN
!          call spline(ldm,ztt,ucol,y2,lsm,ztsl,ucolsl,phld,qhld)
!          call spline(ldm,ztt,vcol,y2,lsm,ztsl,vcolsl,phld,qhld)
!          call spline(ldm,ztt,cldfracl,y2,lsm,ztsl,cldfraclsl,phld,qhld)
!          call spline(ldm,ztt,rlwttcol,y2,lsm,ztsl,rlwttcolsl,phld,qhld)
!          call spline(ldm,ztt,rswttcol,y2,lsm,ztsl,rswttcolsl,phld,qhld)
!          call spline(ldm,ztt,f_icecl,y2,lsm,ztsl,f_iceclsl,phld,qhld)
!          call spline(ldm,ztt,f_rimecl,y2,lsm,ztsl,f_rimeclsl,phld,qhld)
!          call spline(ldm,ztt,f_raincl,y2,lsm,ztsl,f_rainclsl,phld,qhld)
!
!          call spline(ldm,ztt,dustexcl,y2,lsm,ztsl,dustexclsl,phld,qhld)
          call spline(ldm,ztt,dustcol,y2,lsm,ztsl,dustcolsl,phld,qhld)
!!! KARSTEN
!!!KARSTEN2
!          call spline(ldm,ztt,dust1col,y2,lsm,ztsl,dust1colsl,phld,qhld)
!          call spline(ldm,ztt,dust2col,y2,lsm,ztsl,dust2colsl,phld,qhld)
!          call spline(ldm,ztt,dust3col,y2,lsm,ztsl,dust3colsl,phld,qhld)
!          call spline(ldm,ztt,dust4col,y2,lsm,ztsl,dust4colsl,phld,qhld)
!          call spline(ldm,ztt,dust5col,y2,lsm,ztsl,dust5colsl,phld,qhld)
!          call spline(ldm,ztt,dust6col,y2,lsm,ztsl,dust6colsl,phld,qhld)
!          call spline(ldm,ztt,dust7col,y2,lsm,ztsl,dust7colsl,phld,qhld)
!          call spline(ldm,ztt,dust8col,y2,lsm,ztsl,dust8colsl,phld,qhld)
!!!KARSTEN2
!
          do l=1,lsm
            tsl (i,j,l)=tcolsl(l)
            qsl (i,j,l)=max(qcolsl(l),0.)
!            cwsl(i,j,l)=cwclsl(l)
!            dwsl(i,j,l)=dwclsl(l)
!            dsl (i,j,l)=dcolsl(l)
!            wsl (i,j,l)=wcolsl(l)
!            rsl (i,j,l)=rcolsl(l)
!
!!! KARSTEN
!            usl(i,j,l)=ucolsl(l)
!            vsl(i,j,l)=vcolsl(l)
!            cldfrasl(i,j,l)=cldfraclsl(l)
!            rlwttsl(i,j,l)=rlwttcolsl(l)
!            rswttsl(i,j,l)=rswttcolsl(l)
!            f_icesl(i,j,l)=f_iceclsl(l)
!            f_rimesl(i,j,l)=f_rimeclsl(l)
!            f_rainsl(i,j,l)=f_rainclsl(l)
!
!            dustexsl(i,j,l)=dustexclsl(l)
            dustsl(i,j,l)=max(dustcolsl(l),0.)
!!! KARSTEN
!!!KARSTEN2
!            dust1sl(i,j,l)=dust1colsl(l)
!            dust2sl(i,j,l)=dust2colsl(l)
!            dust3sl(i,j,l)=dust3colsl(l)
!            dust4sl(i,j,l)=dust4colsl(l)
!            dust5sl(i,j,l)=dust5colsl(l)
!            dust6sl(i,j,l)=dust6colsl(l)
!            dust7sl(i,j,l)=dust7colsl(l)
!            dust8sl(i,j,l)=dust8colsl(l)
!!!KARSTEN2
!
          enddo
!
!-----------------------------------------------------------------------
!***  extrapolation underground for interface variables
!-----------------------------------------------------------------------
!
          if(zth(lm+1).gt.ztbot) then
            ldm=lm+1
          else
            ldm=lm+2
!
            zth(lm+2)=ztbot
!            x=ztbot-zth(lm+1)
!            if(abs(x/ztbot).lt.eps)    x=0.
!
!            d1=(hcol(lm+1)-hcol(lm-3))/(zth(lm+1)-zth(lm-3))
!            d2=0.
!            hcol(lm+2)=d2*x*x+d1*x+hcol(lm+1)
!
            hcol(lm+2)=-(exp((alsl(lsm)
     &                 -log((pcol(lm)+pcol(lm+1))*0.5))*rgdt)-1.)
     &                 *tcol(lm-2)*rdtdz+(hcol(lm)+hcol(lm+1))*0.5
            pcol(lm+2)=ppsl(lsm)
            q2cl(lm+2)=0.
          endif
!
!-----------------------------------------------------------------------
!***  interpolation of interface variables to pressure levels
!-----------------------------------------------------------------------
!
          y2(ldm)=0.

          call spline(ldm,zth,hcol,y2,lsm,ztsl,hcolsl,phld,qhld)
          call spline(ldm,zth,pcol,y2,lsm,ztsl,pcolsl,phld,qhld)
          call spline(ldm,zth,q2cl,y2,lsm,ztsl,q2clsl,phld,qhld)

!
          do l=1,lsm
            hsl (i,j,l)=hcolsl(l)
            psl (i,j,l)=pcolsl(l)
            q2sl(i,j,l)=max(q2clsl(l),0.)
          enddo
!
          do l=1,lsm-1
            if(hs(i,j).ge.hsl(i,j,l)) then
              tsl(i,j,l)=-((hsl(i,j,l)-hsl(i,j,l-1))/(alsl(l)-alsl(l-1))
     &                  +(hsl(i,j,l+1)-hsl(i,j,l))/(alsl(l+1)-alsl(l)))
     &                  *gor*0.5
            endif
          enddo
!
          do l=1,lm+1
            zet(i,j,l)=zth(l)
          enddo
!
!-----------------------------------------------------------------------
!
        enddo
      enddo
!
!-----------------------------------------------------------------------
!***  end of mass point interpolations
!-----------------------------------------------------------------------
!
!-----------------------------------------------------------------------
!***  smoothing pressure levels ruptured by topography
!-----------------------------------------------------------------------
!
      do l=1,lsm
!
!-----------------------------------------------------------------------
!
        rlx=ovrlx(l)
        yes=0.
        avt=0.
        avh=0.
        kt=0
        kh=0
!
        do j=1,jm
          do i=1,im
            href=hs(i,j)
            if(href.ge.hsl(i,j,l)) then
              yes=1.
              tmask(i,j)=rlx
            else
              tmask(i,j)=0.
              avt=tsl(i,j,l)+avt
              avh=hsl(i,j,l)+avh
              kt=kt+1
              kh=kh+1
            endif
          enddo
        enddo
!
!-----------------------------------------------------------------------
        if(yes.gt.0.) then
!-----------------------------------------------------------------------
!
          if (kt*kh.ne.0) then
            avt=avt/kt
            avh=avh/kh
          endif
!
          do j=1,jm
            do i=1,im
!              rtsl(i,j)=hsl(i,j,l-1)-hsl(i,j,l)
              rtsl(i,j)=hsl(i,j,l)
!              if (hs(i,j).ge.hsl(i,j,l).and.kt*kh.ne.0.and.hs(i,j).gt.10.) then
!                tsl (i,j,l)=avt
!                hsl (i,j,l)=avh
!              endif
!
              if (hs(i,j).ge.hsl(i,j,l)) then
                osl (i,j,l)=0.
                qsl (i,j,l)=0.
!                cwsl(i,j,l)=0.
!                dwsl(i,j,l)=1.
!                dsl (i,j,l)=0.
!                wsl (i,j,l)=0.
!                rsl (i,j,l)=0.
                psl (i,j,l)=ppsl(l)
!                q2sl(i,j,l)=0.
!
!!! KARSTEN
!                usl(i,j,l)=0.
!                vsl(i,j,l)=0.
!                cldfrasl(i,j,l)=0.
!                rlwttsl(i,j,l)=0.
!                rswttsl(i,j,l)=0.
!                f_icesl(i,j,l)=0.
!                f_rimesl(i,j,l)=0.
!                f_rainsl(i,j,l)=0.
!
!                dustexsl(i,j,l)=0.
                dustsl(i,j,l)=0.
!!! KARSTEN
!!!KARSTEN2
!                dust1sl(i,j,l)=0.
!                dust2sl(i,j,l)=0.
!                dust3sl(i,j,l)=0.
!                dust4sl(i,j,l)=0.
!                dust5sl(i,j,l)=0.
!                dust6sl(i,j,l)=0.
!                dust7sl(i,j,l)=0.
!                dust8sl(i,j,l)=0.
!!!KARSTEN2
              endif
!
            enddo
          enddo
!
!----------------------------------------------------------------------
          do n=1,nsmud
!----------------------------------------------------------------------
!
            do j=2,jm-1
              do i=2,im-1
                tsll(i,j)=tsl (i,j-1,l)+tsl (i-1,j,l)
     &                   +tsl (i+1,j,l)+tsl (i,j+1,l)-tsl (i,j,l)*4.
                osll(i,j)=osl (i,j-1,l)+osl (i-1,j,l)
     &                   +osl (i+1,j,l)+osl (i,j+1,l)-osl (i,j,l)*4.
                qsll(i,j)=qsl (i,j-1,l)+qsl (i-1,j,l)
     &                   +qsl (i+1,j,l)+qsl (i,j+1,l)-qsl (i,j,l)*4.
!                cwll(i,j)=cwsl(i,j-1,l)+cwsl(i-1,j,l)
!     &                   +cwsl(i+1,j,l)+cwsl(i,j+1,l)-cwsl(i,j,l)*4.
!                dwll(i,j)=dwsl(i,j-1,l)+dwsl(i-1,j,l)
!     &                   +dwsl(i+1,j,l)+dwsl(i,j+1,l)-dwsl(i,j,l)*4.
!!                dvll(i,j)=dsl (i,j-1,l)+dsl (i-1,j,l)
!!     &                   +dsl (i+1,j,l)+dsl (i,j+1,l)-dsl (i,j,l)*4.
!                wsll(i,j)=wsl (i,j-1,l)+wsl (i-1,j,l)
!     &                   +wsl (i+1,j,l)+wsl (i,j+1,l)-wsl (i,j,l)*4.
!                rsll(i,j)=rsl (i,j-1,l)+rsl (i-1,j,l)
!     &                   +rsl (i+1,j,l)+rsl (i,j+1,l)-rsl (i,j,l)*4.
                hsll(i,j)=rtsl(  i,j-1)+rtsl(  i-1,j)
     &                   +rtsl(  i+1,j)+rtsl(  i,j+1)-rtsl(i,j  )*4.
                psll(i,j)=psl (i,j-1,l)+psl (i-1,j,l)
     &                   +psl (i+1,j,l)+psl (i,j+1,l)-psl (i,j,l)*4.
                q2ll(i,j)=q2sl(i,j-1,l)+q2sl(i-1,j,l)
     &                   +q2sl(i+1,j,l)+q2sl(i,j+1,l)-q2sl(i,j,l)*4.
!
!!! KARSTEN
!!                usll(i,j)=usl(i,j-1,l)+usl(i-1,j,l)
!!     &                   +usl(i+1,j,l)+usl(i,j+1,l)-usl(i,j,l)*4.
!!                vsll(i,j)=vsl(i,j-1,l)+vsl(i-1,j,l)
!!     &                   +vsl(i+1,j,l)+vsl(i,j+1,l)-vsl(i,j,l)*4.
!                cldfrasll(i,j)=cldfrasl(i,j-1,l)+cldfrasl(i-1,j,l)
!     &                        +cldfrasl(i+1,j,l)+cldfrasl(i,j+1,l)
!     &                        -cldfrasl(i,j,l)*4.
!                rlwttsll(i,j)=rlwttsl(i,j-1,l)+rlwttsl(i-1,j,l)
!     &                       +rlwttsl(i+1,j,l)+rlwttsl(i,j+1,l)
!     &                       -rlwttsl(i,j,l)*4.
!                rswttsll(i,j)=rswttsl(i,j-1,l)+rswttsl(i-1,j,l)
!     &                       +rswttsl(i+1,j,l)+rswttsl(i,j+1,l)
!     &                       -rswttsl(i,j,l)*4.
!                f_icesll(i,j)=f_icesl(i,j-1,l)+f_icesl(i-1,j,l)
!     &                       +f_icesl(i+1,j,l)+f_icesl(i,j+1,l)
!     &                       -f_icesl(i,j,l)*4.
!                f_rimesll(i,j)=f_rimesl(i,j-1,l)+f_rimesl(i-1,j,l)
!     &                        +f_rimesl(i+1,j,l)+f_rimesl(i,j+1,l)
!     &                        -f_rimesl(i,j,l)*4.
!                f_rainsll(i,j)=f_rainsl(i,j-1,l)+f_rainsl(i-1,j,l)
!     &                        +f_rainsl(i+1,j,l)+f_rainsl(i,j+1,l)
!     &                        -f_rainsl(i,j,l)*4.
!!
!                dustexsll(i,j)=dustexsl(i,j-1,l)+dustexsl(i-1,j,l)
!     &                        +dustexsl(i+1,j,l)+dustexsl(i,j+1,l)
!     &                        -dustexsl(i,j,l)*4.
                dustsll(i,j)=dustsl(i,j-1,l)+dustsl(i-1,j,l)
     &                      +dustsl(i+1,j,l)+dustsl(i,j+1,l)
     &                      -dustsl(i,j,l)*4.
!!! KARSTEN
!!!KARSTEN2
!                dust1sll(i,j)=dust1sl(i,j-1,l)+dust1sl(i-1,j,l)
!     &                       +dust1sl(i+1,j,l)+dust1sl(i,j+1,l)
!     &                       -dust1sl(i,j,l)*4.
!                dust2sll(i,j)=dust2sl(i,j-1,l)+dust2sl(i-1,j,l)
!     &                       +dust2sl(i+1,j,l)+dust2sl(i,j+1,l)
!     &                       -dust2sl(i,j,l)*4.
!                dust3sll(i,j)=dust3sl(i,j-1,l)+dust3sl(i-1,j,l)
!     &                       +dust3sl(i+1,j,l)+dust3sl(i,j+1,l)
!     &                       -dust3sl(i,j,l)*4.
!                dust4sll(i,j)=dust4sl(i,j-1,l)+dust4sl(i-1,j,l)
!     &                       +dust4sl(i+1,j,l)+dust4sl(i,j+1,l)
!     &                       -dust4sl(i,j,l)*4.
!                dust5sll(i,j)=dust5sl(i,j-1,l)+dust5sl(i-1,j,l)
!     &                       +dust5sl(i+1,j,l)+dust5sl(i,j+1,l)
!     &                       -dust5sl(i,j,l)*4.
!                dust6sll(i,j)=dust6sl(i,j-1,l)+dust6sl(i-1,j,l)
!     &                       +dust6sl(i+1,j,l)+dust6sl(i,j+1,l)
!     &                       -dust6sl(i,j,l)*4.
!                dust7sll(i,j)=dust7sl(i,j-1,l)+dust7sl(i-1,j,l)
!     &                       +dust7sl(i+1,j,l)+dust7sl(i,j+1,l)
!     &                       -dust7sl(i,j,l)*4.
!                dust8sll(i,j)=dust8sl(i,j-1,l)+dust8sl(i-1,j,l)
!     &                       +dust8sl(i+1,j,l)+dust8sl(i,j+1,l)
!     &                       -dust8sl(i,j,l)*4.
!!!!KARSTEN2
!
              enddo
            enddo
!
            do j=2,jm-1
              do i=2,im-1
                tsl (i,j,l)=tsll(i,j)*tmask(i,j)+tsl (i,j,l)
                osl (i,j,l)=osll(i,j)*tmask(i,j)+osl (i,j,l)
                qsl (i,j,l)=qsll(i,j)*tmask(i,j)+qsl (i,j,l)
!                cwsl(i,j,l)=cwll(i,j)*tmask(i,j)+cwsl(i,j,l)
!                dwsl(i,j,l)=dwll(i,j)*tmask(i,j)+dwsl(i,j,l)
!!                dsl (i,j,l)=dvll(i,j)*tmask(i,j)+dsl (i,j,l)
!                wsl (i,j,l)=wsll(i,j)*tmask(i,j)+wsl (i,j,l)
!                rsl (i,j,l)=rsll(i,j)*tmask(i,j)+rsl (i,j,l)
                rtsl(i,j  )=hsll(i,j)*tmask(i,j)+rtsl(i,j  )
                psl (i,j,l)=psll(i,j)*tmask(i,j)+psl (i,j,l)
!                q2sl(i,j,l)=q2ll(i,j)*tmask(i,j)+q2sl(i,j,l)
!
!!! KARSTEN
!          usl(i,j,l)=usll(i,j)*tmask(i,j)+usl(i,j,l)
!          vsl(i,j,l)=vsll(i,j)*tmask(i,j)+vsl(i,j,l)
!          cldfrasl(i,j,l)=cldfrasll(i,j)*tmask(i,j)+cldfrasl(i,j,l)
!          rlwttsl(i,j,l)=rlwttsll(i,j)*tmask(i,j)+rlwttsl(i,j,l)
!          rswttsl(i,j,l)=rswttsll(i,j)*tmask(i,j)+rswttsl(i,j,l)
!          f_icesl(i,j,l)=f_icesll(i,j)*tmask(i,j)+f_icesl(i,j,l)
!          f_rimesl(i,j,l)=f_rimesll(i,j)*tmask(i,j)+f_rimesl(i,j,l)
!          f_rainsl(i,j,l)=f_rainsll(i,j)*tmask(i,j)+f_rainsl(i,j,l)
!
!          dustexsl(i,j,l)=dustexsll(i,j)*tmask(i,j)+dustexsl(i,j,l)
          dustsl(i,j,l)=dustsll(i,j)*tmask(i,j)+dustsl(i,j,l)
!!! KARSTEN
!!!KARSTEN2
!          dust1sl(i,j,l)=dust1sll(i,j)*tmask(i,j)+dust1sl(i,j,l)
!          dust2sl(i,j,l)=dust2sll(i,j)*tmask(i,j)+dust2sl(i,j,l)
!          dust3sl(i,j,l)=dust3sll(i,j)*tmask(i,j)+dust3sl(i,j,l)
!          dust4sl(i,j,l)=dust4sll(i,j)*tmask(i,j)+dust4sl(i,j,l)
!          dust5sl(i,j,l)=dust5sll(i,j)*tmask(i,j)+dust5sl(i,j,l)
!          dust6sl(i,j,l)=dust6sll(i,j)*tmask(i,j)+dust6sl(i,j,l)
!          dust7sl(i,j,l)=dust7sll(i,j)*tmask(i,j)+dust7sl(i,j,l)
!          dust8sl(i,j,l)=dust8sll(i,j)*tmask(i,j)+dust8sl(i,j,l)
!!!KARSTEN2
!
              enddo
            enddo
!
!!!CPEREZ3
!            do j=1,jm
!              do i=1,im
!                if (hs(i,j).ge.hsl(i,j,l)) then
!                qsl (i,j,l)=fill_value
!                dustsl(i,j,l)=fill_value
!                endif
!              enddo
!            enddo
!!!CPEREZ3
!-----------------------------------------------------------------------
          enddo
!-----------------------------------------------------------------------
!
          do j=1,jm
            do i=1,im
!              hsl(i,j,l)=hsl(i,j,l-1)-rtsl(i,j)
              hsl(i,j,l)=rtsl(i,j)
            enddo
          enddo
!
!-----------------------------------------------------------------------
        endif
!-----------------------------------------------------------------------
!
      enddo
!
!-----------------------------------------------------------------------
!***  velocity point variables at pressure levels
!-----------------------------------------------------------------------
!
      do j=1,jm-1
        do i=1,im-1
!
          zup=(zet(i,j,1)+zet(i+1,j,1)
     &        +zet(i,j+1,1)+zet(i+1,j+1,1))*0.125
!
!-----------------------------------------------------------------------
!***  loading variables into vertical columns
!-----------------------------------------------------------------------
!
          do l=1,lm
            zlo=(zet(i,j,l+1)+zet(i+1,j,l+1)
     &         +zet(i,j+1,l+1)+zet(i+1,j+1,l+1))*0.125
!
            ztw(l)=(zlo+zup)
            ucol(l)=u(i,j,l)
            vcol(l)=v(i,j,l)
            zup=zlo
          enddo
!
          if (ztw(lm).ge.ztbot) then
            ldm=lm
          else
            ldm=lm+1
!
            ztw(lm+1)=ztbot
            ucol(lm+1)=0.
            vcol(lm+1)=0.
          endif
!
          y2(ldm)=0.
          call spline(ldm,ztw,ucol,y2,lsm,ztsl,ucolsl,phld,qhld)
          call spline(ldm,ztw,vcol,y2,lsm,ztsl,vcolsl,phld,qhld)
!
          do l=1,lsm
            usl(i,j,l)=ucolsl(l)
            vsl(i,j,l)=vcolsl(l)
          enddo
!
        enddo
      enddo
!
!-----------------------------------------------------------------------
!***  end of wind point interpolations
!-----------------------------------------------------------------------
!!!CPEREZ3
!
!      do j=1,jm-1
!        do i=1,im-1
!
!          hsv=(hs(i,j)+hs(i+1,j)+hs(i,j+1)+hs(i+1,j+1))*0.25
!
!-----------------------------------------------------------------------
!***  setting underground values
!-----------------------------------------------------------------------
!
!          do l=1,lsm
!            hlv=(hsl(i,j,l)+hsl(i+1,j,l)
!     &          +hsl(i,j+1,l)+hsl(i+1,j+1,l))*0.25
!            if (hsv.gt.hlv) then
!              usl(i,j,l)=0.
!              vsl(i,j,l)=0.
!              wsl(i,j,l)=0.
!            endif
!          enddo
!
!        enddo
!      enddo
!
!Interpolate vectors to scalar grid  (Remember it is a B grid)
!and setting underground values
!
      do j=2,jm-1
        do i=2,im-1
!u10 in H points already          u10_h(i,j)=(u10(i,j)+u10(i-1,j)+u10(i,j-1)+u10(i-1,j-1))*0.25
!v10 in H points already          v10_h(i,j)=(v10(i,j)+v10(i-1,j)+v10(i,j-1)+v10(i-1,j-1))*0.25
          do l=1,lsm
            if (hs(i,j).ge.hsl(i,j,l)) then
              usl_h(i,j,l)=0.
              vsl_h(i,j,l)=0.
            else
              usl_h(i,j,l)=(usl(i,j,l)+usl(i-1,j,l)+usl(i,j-1,l)
     &                     +usl(i-1,j-1,l))*0.25
              vsl_h(i,j,l)=(vsl(i,j,l)+vsl(i-1,j,l)+vsl(i,j-1,l)
     &                     +vsl(i-1,j-1,l))*0.25
            endif
          enddo
        enddo
      enddo 
!
!!!CPEREZ3

!-----------------------------------------------------------------------
!***  sea level pressure
!-----------------------------------------------------------------------

      do j=1,jm
        do i=1,im

          if(fis(i,j).gt.-1..and.fis(i,j).lt.1.) then
            slp(i,j)=pint(i,j,lm+1)
          else

            hcol5(1)=hsl(i,j,lsm)      ! 1050 mb
            hcol5(2)=hsl(i,j,lsm-1)    ! 1025 mb
            hcol5(3)=hsl(i,j,lsm-2)    ! 1000 mb
            hcol5(4)=hsl(i,j,lsm-3)    !  975 mb
            hcol5(5)=hsl(i,j,lsm-4)    !  950 mb

            pcol5(1)=psl(i,j,lsm)      ! 1050 mb
            pcol5(2)=psl(i,j,lsm-1)    ! 1025 mb
            pcol5(3)=psl(i,j,lsm-2)    ! 1000 mb
            pcol5(4)=psl(i,j,lsm-3)    !  975 mb
            pcol5(5)=psl(i,j,lsm-4)    !  950 mb

            do l=1,5
              y25(l)=0.0
            enddo

            call spline(5,hcol5,pcol5,y25,1,0.0,slp1,phld,qhld)
            slp(i,j)=slp1

          endif
          pints(i,j)=pint(i,j,lm+1)

        enddo
      enddo

!-----------------------------------------------------------------------
!***  PRESSURE CONVERSION end
!-----------------------------------------------------------------------

!----Define GLAT, GLON (geographic lat and lon), LEV and time...these will be used to write to south_north, west_east and bottom_top respectively in netcdf file

!CPEREZ3      DO i=1,jm
!CPEREZ3      GLAT(i)=sbd+((i-1)*dphd) 
!CPEREZ3!      PRINT*,'i is ',i,'lat is ',GLAT(i)
!CPEREZ3      ENDDO

!CPEREZ3      DO i=1,im
!CPEREZ3      GLON(i)=wbd+((i-1)*dlmd) 
!CPEREZ3!      PRINT*,'i is ',i,'lon is ',GLON(i)      
!CPEREZ3      ENDDO

      DO i=1,jm
        south_north(i)=i
      ENDDO

      DO i=1,im
        west_east(i)=i
      ENDDO

      DO i=1,im
        DO j=1,jm
          LAT(i,j)=GLAT(i,j)*180./3.1415926535897932384626433832795
          LON(i,j)=GLON(i,j)*180./3.1415926535897932384626433832795
        ENDDO
      ENDDO

      DO i=1,lsm
        pres(i)=ppsl(i)/100.
      ENDDO

      time_value(1) = k-1        ! This ensures that the time coordinate variable takes time step of 3 hrs in each file created beginning with time=0

      write (*,*)' --------------------------- '
      write (*,*)'All done.  Have a nice day. '
      write (*,*)'STARTING NETCDF FILE CREATION NOW           '


!--Now create the strings to be written to the netcdf file as global attribute. This information will be displayed in the header of the file with 'ncdump -h filename.nc'

      write(gt1,'(i2)')(idat(1:1))
! This converts the first part of idat to character array gt1
!      print*,'gt1 is ',gt1

      write(gt2,'(i2)')(idat(2:2))
      write(gt3,'(i4)')(idat(3:3))
      write(gt4,'(i2)')ihrst
      write(gt5,'(i2)')ihr

! global_title will be written in the time variable

      if (idat(2).lt.10) then
        write(gt6,'(i1)')(idat(2:2))
        global_title1='hours since '//gt3//'-0'//gt6
      else
        global_title1='hours since '//gt3//'-'//gt2
      endif
     
      if (idat(1).lt.10) then
        write(gt7,'(i1)')(idat(1:1))
        global_title2='-0'//gt7//' '//gt4//':00'
      else
        global_title2='-'//gt1//' '//gt4//':00'
      endif
      global_title=global_title1//global_title2

      print*,'global title is ',global_title

!    Above print statement should look like this:   global_title='*** Output: 24. 1.2008 at 12 UTC + 0h'

C*******  Netcdf WRITE OUT THE FIELD ********************************  

      STATUS=NF_CREATE(file_name_out,0,NCID)

      STATUS=NF_DEF_DIM(NCID,'time',NF_UNLIMITED,TIMDIM_ID)
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'DIM time created'    

      STATUS=NF_DEF_DIM(NCID,'west_east',im-2,LONGDIM_ID) ! the first and last values of input variables are not to be written as they are the boundary conditions...hence im-2 and jm-2 (which is 769,541)
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)      
      print*,'DIM west_east created'      

      STATUS=NF_DEF_DIM(NCID,'south_north',jm-2,LATDIM_ID)   
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'DIM sout_north created'    

      STATUS=NF_DEF_DIM(NCID,'pres',lsm-2,LEVDIM_ID)    !! lm is 64, was lsm (30) in pressure version   
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'DIM bottom_top created'   

!      STATUS=NF_DEF_DIM(NCID,'nwets',nwets,NWETSDIM_ID)   
!      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
!      print*,'DIM nwets created'   

!!!CHEM_CP
!      STATUS=NF_DEF_DIM(NCID,'naero',8,NAERODIM_ID)
!      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
!      print*,'DIM naero created'
!!!CHEM_CP

!-----------Define the Netcdf VARIABLES Dimension ID-------------------------

      DIMID_1=(/ LONGDIM_ID,LATDIM_ID,LEVDIM_ID,TIMDIM_ID /)
      DIMID_2=(/ LONGDIM_ID,LATDIM_ID,TIMDIM_ID /)
!      DIMID_3=(/ NWETSDIM_ID,LONGDIM_ID,LATDIM_ID,TIMDIM_ID /)
!!!CHEM_CP
!      DIMID_10=(/ NAERODIM_ID,LONGDIM_ID,LATDIM_ID,TIMDIM_ID /)

      DIMID_4=(/ TIMDIM_ID /)
      DIMID_5=(/ LEVDIM_ID /)
      DIMID_6=(/ LATDIM_ID /)
      DIMID_7=(/ LONGDIM_ID /)

      DIMID_8=(/ LATDIM_ID,TIMDIM_ID /)
      DIMID_9=(/ LONGDIM_ID,TIMDIM_ID /)

! Note: The dimensions in netcdf file need to be defined as coordinate variables (and filled with values) so that the file becomes CF compliant and can be read directly in Grads, IDV etc. All attributes are important for CF compliant.

!------------Define coordinate variables...without which the file doesn't become CF complaint-------

      STATUS=NF_DEF_VAR(NCID,'south_north',NF_REAL,1,DIMID_6,LATVAR_ID) 
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'VAR south_north created'
      STATUS=NF_PUT_ATT_TEXT(NCID,LATVAR_ID,'units',1,' ')
      STATUS=NF_PUT_ATT_TEXT(NCID,LATVAR_ID,'title',7,'index j')   
      STATUS=NF_PUT_ATT_TEXT(NCID,LATVAR_ID,'axis',1,'Y')   
      STATUS=NF_PUT_ATT_TEXT(NCID,LATVAR_ID,
     & 'long_name',7,'index j')

      STATUS=NF_DEF_VAR(NCID,'west_east',NF_REAL,1,DIMID_7,LONGVAR_ID) 
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'VAR west_east created'
      STATUS=NF_PUT_ATT_TEXT(NCID,LONGVAR_ID,'units',1,' ')
      STATUS=NF_PUT_ATT_TEXT(NCID,LONGVAR_ID,'title',7,'index i')
      STATUS=NF_PUT_ATT_TEXT(NCID,LONGVAR_ID,'axis',1,'X')
      STATUS=NF_PUT_ATT_TEXT(NCID,LONGVAR_ID,
     & 'long_name',7,'index i')

      STATUS=NF_DEF_VAR(NCID,'pres',NF_REAL,1,DIMID_5,LEVVAR_ID) 
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'VAR level created'
      STATUS=NF_PUT_ATT_TEXT(NCID,LEVVAR_ID,'units',3,'hPa')
      STATUS=NF_PUT_ATT_TEXT(NCID,LEVVAR_ID,'title',14,
     & 'pressure level')
      STATUS=NF_PUT_ATT_TEXT(NCID,LEVVAR_ID,
     & 'long_name',14,'pressure level')

      STATUS=NF_DEF_VAR(NCID,'time',NF_INT,1,DIMID_4,TIMVAR_ID) 
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'VAR time created'
      STATUS = nf_put_att_text(ncid, TIMVAR_ID, 'units', 28, 
     &global_title)
      STATUS=NF_PUT_ATT_TEXT(NCID,TIMVAR_ID,'title',4,'time')   
      STATUS=NF_PUT_ATT_TEXT(NCID,TIMVAR_ID,'long_name',4,'time')

!-----------Define the other Netcdf VARIABLES ID and their attributes----First, GLAT/GLON---------

!CPEREZ      STATUS=NF_DEF_VAR(NCID,'glat',NF_REAL,2,DIMID_8,GLATVAR_ID) 
      STATUS=NF_DEF_VAR(NCID,'lat',NF_REAL,2,DIMID_2,GLATVAR_ID) 
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'VAR GLAT created'
      STATUS=NF_PUT_ATT_TEXT(NCID,GLATVAR_ID,'units',13,'degrees_north')
      STATUS=NF_PUT_ATT_TEXT(NCID,GLATVAR_ID,'title',8,'latitude')
      STATUS=NF_PUT_ATT_TEXT(NCID,GLATVAR_ID,
     & 'long_name',8,'latitude')

      STATUS=NF_DEF_VAR(NCID,'lon',NF_REAL,2,DIMID_2,GLONVAR_ID) 
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
      print*,'VAR GLON created'
      STATUS=NF_PUT_ATT_TEXT(NCID,GLONVAR_ID,'units',12,'degrees_east')
      STATUS=NF_PUT_ATT_TEXT(NCID,GLONVAR_ID,'title',9,'longitude')
      STATUS=NF_PUT_ATT_TEXT(NCID,GLONVAR_ID,
     & 'long_name',9,'longitude')

! Meteo outputs: 

      call declare_variable( NCID, CFG_T, 'tsl', NF_REAL, TSL_ID,
     &    4, DIMID_1, 'K', 'temperature', 'temperature', 'lon lat',
     &    fill_value)

      call declare_variable( NCID, CFG_Q, 'qsl', NF_REAL, QSL_ID,
     &    4, DIMID_1, 'kg kg-1', 'specific humidity',
     &    'specific humidity', 'lon lat', fill_value)
      
      call declare_variable( NCID, CFG_HSL, 'hsl', NF_REAL, HSL_ID,
     &    4, DIMID_1, 'm', 'height',
     &    'height', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CLDFRA, 'cldfra', NF_REAL,
     &    CLDFRA_ID, 4, DIMID_1, ' ', 'cloud_fraction',
     &    'cloud_fraction', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RLWTT, 'rlwtt', NF_REAL,
     &    RLWTT_ID, 4, DIMID_1, 'K s-1', 'rlwtt',
     &    'longwave_temperature_tendency', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RSWTT, 'rswtt', NF_REAL,
     &    TSWTT_ID, 4, DIMID_1, 'K s-1', 'rswtt',
     &    'shortwave_temperature_tendency', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_F_ICE, 'f_ice', NF_REAL,
     &    F_ICE_ID, 4, DIMID_1, ' ', 'f_ice',
     &    'condensate_ice_fraction', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_F_RIMEF, 'f_rimef', NF_REAL,
     &    F_RIMEF_ID, 4, DIMID_1, ' ', 'f_rimef',
     &    'rime_factor', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_F_RAIN, 'f_rain', NF_REAL,
     &    F_RAIN_ID, 4, DIMID_1, ' ', 'f_rain',
     &    'condensate_rain_fraction', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_U, 'usl_h', NF_REAL,
     &    USL_ID, 4, DIMID_1, 'm s-1', 'u-wind',
     &    'u wind component profile', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_V, 'vsl_h', NF_REAL,
     &    VSL_ID, 4, DIMID_1, 'm s-1', 'v-wind',
     &    'v wind component profile', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CW, 'cw', NF_REAL,
     &    CW_ID, 4, DIMID_1, 'dummy', 'cw-UMO',
     &    'cw-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_Q2, 'q2', NF_REAL,
     &    Q2_ID, 4, DIMID_1, ' ', 'humidity_mixing_ratio_2-m',
     &    'diagnostic_2-m_mixing_ratio_from_surface_layer_and_lsm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_W, 'w', NF_REAL,
     &    WSL_ID, 4, DIMID_1, 'dummy', 'w-UMO',
     &    'w-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SLP, 'slp', NF_REAL,
     &    SLP_ID, 3, DIMID_2, 'Pa', 'sea level pressure',
     &    'sea level pressure', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_PD, 'pd', NF_REAL,
     &    PD_ID, 3, DIMID_2, 'dummy', 'pd-UMO',
     &    'pd-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_FIS, 'fis', NF_REAL,
     &    FIS_ID, 3, DIMID_2, 'm2 s-2', 'surface_geopotential',
     &    'surface_geopotential', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_PINT, 'pint', NF_REAL,
     &    PINTS_ID, 3, DIMID_2, 'dummy', 'pint-UMO',
     &    'pint-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_THS, 'ths', NF_REAL,
     &    THS_ID, 3, DIMID_2, 'K', 'surface_potential_temperature',
     &    'surface_theta', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_QS, 'qs', NF_REAL,
     &    QS_ID, 3, DIMID_2, ' ', 'specific_humidity',
     &    'specific_humidity_at_surface', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SNO, 'sno', NF_REAL,
     &    SNO_ID, 3, DIMID_2, 'kg m-2',
     &    'liquid_water_content_of_snow_layer',
     &    'liquid_water_content_of_snow_layer', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ROF, 'rof', NF_REAL,
     &    ROF_ID, 3, DIMID_2, 'dummy', 'rof-UMO',
     &    'rof-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_USTAR, 'ustar', NF_REAL,
     &    USTAR_ID, 3, DIMID_2, 'm s-1', 'friction velocity',
     &    'friction velocity', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_AKHS, 'akhs', NF_REAL,
     &    AKHS_ID, 3, DIMID_2, 'm s-1',
     &    'sfc_exch_coeff_of_momentum_from_Mellor-Yamada-Janjic(MYJ)',
     &    'sfc_exch_coeff_t_&_q_div_by_delta_z_from_MYJ', 'lon lat',
     &    fill_value)

      call declare_variable( NCID, CFG_AKMS, 'akms', NF_REAL,
     &    AKMS_ID, 3, DIMID_2, 'm s-1',
     &    'sfc_exch_coeff_of_momentum_from_Mellor-Yamada-Janjic(MYJ)',
     &    'sfc_exch_momentum_div_by_delta_z_from_MYJ', 'lon lat',
     &    fill_value)

      call declare_variable( NCID, CFG_ACPREC, 'acprec', NF_REAL,
     &    ACPREC_ID, 3, DIMID_2, 'm', 'accumulated precipitation',
     &    'accumulated precipitation', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CUPREC, 'cuprec', NF_REAL,
     &    CUPREC_ID, 3, DIMID_2, 'm', 'convective_precipitation',
     &    'convective_precipitation', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_U10, 'u10', NF_REAL,
     &    U10_ID, 3, DIMID_2, 'm s-1', '10m u wind',
     &    '10m u wind', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_V10, 'v10', NF_REAL,
     &    V10_ID, 3, DIMID_2, 'm s-1', '10m v wind',
     &    '10m v wind', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_TH10, 'th10', NF_REAL,
     &    TH10_ID, 3, DIMID_2, 'K',
     &    'surface_potential_temperature_at_10-m',
     &    'diagnostic 10-m theta from MYJ', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_Q10, 'Q10', NF_REAL,
     &    Q10_ID, 3, DIMID_2, ' ', 'specific_humidity_at_10-m',
     &    'diagnostic 10-m specific humidity from MYJ', 'lon lat',
     &    fill_value)

      call declare_variable( NCID, CFG_TH02, 'th02', NF_REAL,
     &    TH02_ID, 3, DIMID_2, 'K',
     &    'surface_potential_temperature_at_2-m',
     &    'diagnostic 2-m theta from surface layer and lsm', 'lon lat',
     &    fill_value)

      call declare_variable( NCID, CFG_Q02, 'q02', NF_REAL,
     &    Q02_ID, 3, DIMID_2, 'kg kg-1', '2m specific humidity',
     &    '2m specific humidity', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SLWD, 'slwd', NF_REAL,
     &    SLWD_ID, 3, DIMID_2, 'dummy', 'slwd-UMO',
     &    'slwd-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SSW, 'ssw', NF_REAL,
     &    SSW_ID, 3, DIMID_2, 'dummy', 'ssw-UMO',
     &    'ssw-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_THZ0, 'thz0', NF_REAL,
     &    THZ0_ID, 3, DIMID_2, 'K',
     &    'potential temperature at roughness length',
     &    'theta_at_top_of_viscous_sub_layer', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_QZ0, 'qz0', NF_REAL,
     &    QZ0_ID, 3, DIMID_2, 'kg m-3',
     &    'specific_humidity_at_roughness_length',
     &    'specific_humidity_at_top_of_viscous_sub_layer',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_Z0, 'z0', NF_REAL,
     &    Z0_ID, 3, DIMID_2, 'm', 'background_roughness_length',
     &    'background_roughness_length', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_T2, 't2', NF_REAL,
     &    T2_ID, 3, DIMID_2, 'K', '2m temperature',
     &    '2m temperature', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_MAXT2, 'maxt2', NF_REAL,
     &    MAXT2_ID, 3, DIMID_2, 'K', 'max 2m temperature',
     &    'max 2m temperature', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_MINT2, 'mint2', NF_REAL,
     &    MINT2_ID, 3, DIMID_2, 'K', 'min 2m temperature',
     &    'min 2m temperature', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_PS, 'ps', NF_REAL,
     &    PS_ID, 3, DIMID_2, 'Pa', 'surface pressure',
     &    'surface pressure', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_PSHLTR, 'pshltr', NF_REAL,
     &    PSHLTR_ID, 3, DIMID_2, 'Pa', '2m pressure',
     &    '2m pressure', 'lon lat', fill_value)

! Radiative output:

      call declare_variable( NCID, CFG_ACFRCV, 'acfrcv', NF_REAL,
     &    ACFRCV_ID, 3, DIMID_2, ' ', 'acfrcv',
     &    'acfrcv', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ACFRST, 'acfrst', NF_REAL,
     &    ACFRST_ID, 3, DIMID_2, ' ', 'acfrst',
     &    'acfrst', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ALBASE, 'albase', NF_REAL,
     &    ALBASE_ID, 3, DIMID_2, ' ', 'albase',
     &    'albase', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ALWIN, 'alwin', NF_REAL,
     &    ALWIN_ID, 3, DIMID_2, ' ', 'alwin',
     &    'alwin', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ALWOUT, 'alwout', NF_REAL,
     &    ALWOUT_ID, 3, DIMID_2, ' ', 'alwout',
     &    'alwout', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ALWTOA, 'alwtoa', NF_REAL,
     &    ALWTOA_ID, 3, DIMID_2, ' ', 'alwtoa',
     &    'alwtoa', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ASWIN, 'aswin', NF_REAL,
     &    ASWIN_ID, 3, DIMID_2, 'W m-2', 'aswin',
     &    'acummulated incoming shortwave at ground', 'lon lat',
     &    fill_value)

      call declare_variable( NCID, CFG_ASWOUT, 'aswout', NF_REAL,
     &    ASWOUT_ID, 3, DIMID_2, ' ', 'aswout',
     &    'aswout', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ASWTOA, 'aswtoa', NF_REAL,
     &    ASWTOA_ID, 3, DIMID_2, ' ', 'aswtoa',
     &    'aswtoa', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_BGROFF, 'bgroff', NF_REAL,
     &    BGROFF_ID, 3, DIMID_2, ' ', 'bgroff',
     &    'bgroff', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CFRACH, 'cfrach', NF_REAL,
     &    CFRACH_ID, 3, DIMID_2, ' ', 'cfrach',
     &    'cfrach', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CFRACL, 'cfracl', NF_REAL,
     &    CFRACL_ID, 3, DIMID_2, ' ', 'cfracl',
     &    'cfracl', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CFRACM, 'cfracm', NF_REAL,
     &    CFRACM_ID, 3, DIMID_2, ' ', 'cfracm',
     &    'cfracm', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CLDEFI, 'cldefi', NF_REAL,
     &    CLDEFI_ID, 3, DIMID_2, ' ', 'cldefi',
     &    'cldefi', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CMC, 'cmc', NF_REAL,
     &    CMC_ID, 3, DIMID_2, ' ', 'cmc',
     &    'cmc', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CNVBOT, 'cnvbot', NF_REAL,
     &    CNVBOT_ID, 3, DIMID_2, ' ', 'cnvbot',
     &    'cnvbot', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CNVTOP, 'cnvtop', NF_REAL,
     &    CNVTOP_ID, 3, DIMID_2, ' ', 'cnvtop',
     &    'cnvtop', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CPRATE, 'cprate', NF_REAL,
     &    CPRATE_ID, 3, DIMID_2, ' ', 'cprate',
     &    'cprate', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CUPPT, 'cuppt', NF_REAL,
     &    CUPPT_ID, 3, DIMID_2, ' ', 'cuppt',
     &    'cuppt', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CZEN, 'czen', NF_REAL,
     &    CZEN_ID, 3, DIMID_2, ' ', 'czen',
     &    'czen', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_CZMEAN, 'czmean', NF_REAL,
     &    CZMEAN_ID, 3, DIMID_2, ' ', 'czmean',
     &    'czmean', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_MXSNAL, 'mxsnal', NF_REAL,
     &    MXSNAL_ID, 3, DIMID_2, ' ', 'mxsnal',
     &    'mxsnal', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RADOT, 'radot', NF_REAL,
     &    RADOT_ID, 3, DIMID_2, ' ', 'radot',
     &    'radot', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RLWIN, 'rlwin', NF_REAL,
     &    RLWIN_ID, 3, DIMID_2, 'kg m-3', 'rlwin',
     &    'rlwin', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RLWTOA, 'rlwtoa', NF_REAL,
     &    RLWTOA_ID, 3, DIMID_2, ' ', 'rlwtoa',
     &    'rlwtoa', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RSWIN, 'rswin', NF_REAL,
     &    RSWIN_ID, 3, DIMID_2, 'W m-2', 'rswin',
     &    'incoming shortwave at ground', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RSWINC, 'rswinc', NF_REAL,
     &    RSWINC_ID, 3, DIMID_2, ' ', 'rswinc',
     &    'rswinc', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_RSWOUT, 'rswout', NF_REAL,
     &    RSWOUT_ID, 3, DIMID_2, ' ', 'rswout',
     &    'tswout', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SFCLHX, 'sfclhx', NF_REAL,
     &    SFCLHX_ID, 3, DIMID_2, ' ', 'sfclhx',
     &    'sfclhx', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SFCSHX, 'sfcshx', NF_REAL,
     &    SFCSHX_ID, 3, DIMID_2, ' ', 'sfcshx',
     &    'sfcshx', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SIGT4, 'sigt4', NF_REAL,
     &    SIGT4_ID, 3, DIMID_2, ' ', 'sigt4',
     &    'sigt4', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_EPSR, 'epsr', NF_REAL,
     &    EPSR_ID, 3, DIMID_2, 'dummy', 'epsr-UMO',
     &    'epsr-UMO', 'lon lat', fill_value)

!      call declare_variable( NCID, CFG_TGT, 'tg', NF_REAL,
!     &    TG_ID, 4, DIMID_3, 'K', 'ground_temperature',
!     &    'ground_temperature', 'lon lat', fill_value)

!      call declare_variable( NCID, CFG_WGT, 'wg', NF_REAL,
!     &    WG_ID, 4, DIMID_3, 'dummy', 'wg-UMO',
!     &    'wg-UMO', 'lon lat', fill_value)


! Dust outputs:

      call declare_variable( NCID, CFG_DUST_CONC, 'dust_conc', NF_REAL,
     &    DUST_CONC_ID, 4, DIMID_1, 'kg m-3',
     &    'dust concentration profile',
     &    'dust concentration profile', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_550, 'dust_aod_550',
     &    NF_REAL, DUST_AOD_550_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 550 nm','dust optical depth at 550 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_350, 'dust_aod_350',
     &    NF_REAL, DUST_AOD_350_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 350 nm','dust optical depth at 350 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_450, 'dust_aod_450',
     &    NF_REAL, DUST_AOD_450_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 450 nm','dust optical depth at 450 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_500, 'dust_aod_500',
     &    NF_REAL, DUST_AOD_500_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 500 nm','dust optical depth at 500 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_650, 'dust_aod_650',
     &    NF_REAL, DUST_AOD_650_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 650 nm','dust optical depth at 650 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_800, 'dust_aod_800',
     &    NF_REAL, DUST_AOD_800_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 800 nm','dust optical depth at 800 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_AOD_900, 'dust_aod_900',
     &    NF_REAL, DUST_AOD_900_ID, 3, DIMID_2, ' ',
     &    'dust optical depth at 900 nm','dust optical depth at 900 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_EXT_550_SFC,
     &    'dust_ext_550_sfc', NF_REAL, DUST_EXT_550_SFC_ID, 3,
     &    DIMID_2, 'm-1',
     &    'near surface dust extinction coefficient at 550 nm',
     &    'near surface dust extinction coefficient at 550 nm',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_SCONC, 'dust_sconc',
     &    NF_REAL, DUST_SCONC_ID, 3, DIMID_2, 'kg m-3',
     &    'dust near surface concentration',
     &    'dust near surface concentration', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_SCONC02, 'dust_sconc02',
     &    NF_REAL, DUST_SCONC02_ID, 3, DIMID_2, 'kg m-3',
     &    'dust 2m concentration', 'dust 2m concentration',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_SCONC10, 'dust_sconc10',
     &    NF_REAL, DUST_SCONC10_ID, 3, DIMID_2, 'kg m-3',
     &    'dust 10m concentration', 'dust 10m concentration',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_PM10_SCONC10,
     &    'dust_pm10_sconc10', NF_REAL, DUST_PM10_SCONC10_ID, 3,
     &    DIMID_2, 'kg m-3', 'dust PM10 10m concentration',
     &    'dust PM10 10m concentration', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_PM25_SCONC10,
     &    'dust_pm25_sconc10', NF_REAL, DUST_PM25_SCONC10_ID, 3,
     &    DIMID_2, 'kg m-3', 'dust PM2.5 10m concentration',
     &    'dust PM2.5 10m concentration', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_WETDEP_ACPREC,
     &    'dust_wetdep', NF_REAL, DUST_WETDEP_ACPREC_ID, 3,
     &    DIMID_2, 'kg m-2', 'accumulated dust wet deposition',
     &    'accumulated dust wet deposition', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_WETDEP_CUPREC,
     &    'dust_wetdep_cuprec', NF_REAL, DUST_WETDEP_CUPREC_ID, 3,
     &    DIMID_2, 'kg m-2', 'cuprec: dust wet deposition',
     &    'cuprec: dust wet deposition', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_DRYDEP, 'dust_drydep',
     &    NF_REAL, DUST_DRYDEP_ID, 3, DIMID_2, 'kg m-2',
     &    'accumulated dust dry deposition and gravitational settling',
     &    'accumulated dust dry deposition and gravitational settling',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_LOAD, 'dust_load', NF_REAL,
     &    DUST_LOAD_ID, 3, DIMID_2, 'kg m-2', 'dust loading',
     &    'dust loading', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_EMI, 'dust_emi', NF_REAL,
     &    DUST_EMI_ID, 3, DIMID_2, 'kg m-2',
     &    'accumulated dust emission', 'accumulated dust emission',
     &    'lon lat', fill_value)

      call declare_variable( NCID, CFG_DUST_EXT_550,
     &     'dust_ext_550', NF_REAL, DUST_EXT_550_ID, 4, DIMID_1, 'm-1',
     &    'dust extinction coeff at 550',
     &    'dust extinction coeff at 550', 'lon lat', fill_value)

! Dust bin outputs

      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_LOAD_BIN,
     &    'dust_load_b'//varname, NF_REAL, dust_load_bin_ids(bin),
     &    3, DIMID_2, 'kg m-3', 'dust loading bin '//varname,
     &    'dust loading bin '//varname,
     &    'lon lat', fill_value)
      enddo

      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_WETDEP_ACPREC_BIN,
     &    'dust_wetdep_b'//varname,
     &    NF_REAL, dust_wetdep_acprec_bin_ids(bin), 3, DIMID_2,
     &    'kg m-3', 'dust wetdep acprec bin '//varname,
     &    'dust wetdep acprec bin '//varname,
     &    'lon lat', fill_value)
      enddo
      
      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_WETDEP_CUPREC_BIN,
     &    'dust_wetdep_cuprec_b'//varname,
     &    NF_REAL, dust_wetdep_cuprec_bin_ids(bin), 3, DIMID_2,
     &    'kg m-3', 'dust wetdep cuprec bin '//varname ,
     &    'dust wetdep cuprec bin '//varname,
     &    'lon lat', fill_value)
      enddo

      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_DRYDEP_BIN,
     &    'dust_drydep_b'//varname,
     &    NF_REAL, dust_drydep_bin_ids(bin), 3, DIMID_2, 'kg m-3',
     &    'dust drydep bin '//varname , 'dust drydep bin '//varname,
     &    'lon lat', fill_value)
      enddo
      
      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_AOD_550_BIN,
     &    'dust_aod_550_b'//varname,
     &    NF_REAL, dust_aod550_bin_ids(bin), 3, DIMID_2, ' ',
     &    'dust aod 550 bin '//varname , 'dust aod 550 bin '//varname,
     &    'lon lat', fill_value)
      enddo
      
      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_EMI_BIN,
     &    'dust_emi_b'//varname, NF_REAL, dust_emi_bin_ids(bin),
     &     3, DIMID_2, 'kg m-2',
     &    'dust emission bin '//varname , 'dust emission bin '//varname,
     &    'lon lat', fill_value)
      enddo
      
      do bin=1,kps
        write (varname, '(i1)') bin
        call declare_variable( NCID, CFG_DUST_SCONC_BIN,
     &    'dust_sconc_b'//varname, NF_REAL, dust_sconc_bin_ids(bin),
     &    3, DIMID_2, 'kg m-3', 'dust sconc bin '//varname ,
     &    'dust sconc bin '//varname, 'lon lat', fill_value)
      enddo

! Aero outputs:

!      call declare_variable( NCID, CFG_AERO_ACPREC, 'aero_acprec',
!     &    NF_REAL, AERO_ACPREC_ID, 4, DIMID_10, 'kg m-2',
!     &    'aerosol wet scanv', 'aerosol wet scanv',
!     &    'lon lat', fill_value)
!
!      call declare_variable( NCID, CFG_AERO_CUPREC, 'aero_cuprec',
!     &    NF_REAL, AERO_CUPREC_ID, 4, DIMID_10, 'kg m-2',
!     &    'aero conv wet scanv', 'aero conv wet scanv',
!     &    'lon lat', fill_value)
!
!      call declare_variable( NCID, CFG_AERO_DEPDRY, 'aero_depdry',
!     &    NF_REAL, AERO_DEPDRY_ID, 4, DIMID_10, 'kg m-2',
!     &    'aero dust dry deposition', 'aero dust dry deposition',
!     &    'lon lat', fill_value)
!
!      call declare_variable( NCID, CFG_AERO_DLOAD, 'aero_dload',
!     &    NF_REAL, AERO_DEPDRY_ID, 4, DIMID_10, 'kg m-2',
!     &    'aero dust load', 'aero dust load',
!     &    'lon lat', fill_value)

! Land outputs:

      call declare_variable( NCID, CFG_SM, 'sm', NF_REAL,
     &    SM_ID, 3, DIMID_2, ' ', 'sea_mask',
     &    'land_sea_mask, 1 = "Sea" 0 = "Land"', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SICE, 'sice', NF_REAL,
     &    SICE_ID, 3, DIMID_2, ' ', 'sea_ice_fraction',
     &    'sea_ice_fraction', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_SST, 'sst', NF_REAL,
     &    SST_ID, 3, DIMID_2, 'K', 'sea_surface_temperature',
     &    'sea_surface_temperature', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_INSOIL, 'insoil', NF_REAL,
     &    INSOIL_ID, 3, DIMID_2, 'dumy', 'insoil-UMO',
     &    'insoil-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_INVEG, 'inveg', NF_REAL,
     &    INVEG_ID, 3, DIMID_2, 'dummy', 'inveg-UMO',
     &    'inveg-UMO', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_VEGFRC, 'vegfrc', NF_REAL,
     &    VEGFRC_ID, 3, DIMID_2, ' ', 'vegetation area fraction',
     &    'vegetation area fraction', 'lon lat', fill_value)

      call declare_variable( NCID, CFG_ALBEDO, 'albedo', NF_REAL,
     &    ALBEDO_ID, 3, DIMID_2, ' ', 'albedo',
     &    'dynamic_albedo', 'lon lat', fill_value)

      print*,'All variables declared.'
!---------------Define Global Attributes-------------------------------

      STATUS=NF_PUT_ATT_TEXT(NCID,NF_GLOBAL,'title',31,
     &'Regional Forecast NMMB/BSC-Dust' )
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)

      STATUS = nf_put_att_text(ncid, NF_GLOBAL, 'History', 33, 
     & 'Carlos Perez Garcia-Pando 2010-06')
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)

      STATUS = nf_put_att_text(ncid, NF_GLOBAL, 'Conventions', 6, 
     & 'CF-1.2')
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)

      STATUS = nf_put_att_text(ncid, NF_GLOBAL, 'Source', 22, 
     & 'NMMB/BSC-Dust Regional')
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)

      STATUS = nf_put_att_text(ncid, NF_GLOBAL, 'Grid_type', 48, 
     & 'B-grid: vectors interpolated to scalar positions')
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)

      STATUS = nf_put_att_text(ncid, NF_GLOBAL, 'Map_Proj', 26,      ! **** If regional domain, then ammend to rotated lat-lon giving additional info such as new origin, pole etc ******** !
     & 'Rotated latitude longitude')
      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)

      STATUS=NF_ENDDEF(NCID)

      print*,'DEFINING DIMENSIONS AND VARIABLES COMPLETE'

! Now begin writing the variables...there is a different count/start and do loop depending on the dimension of the variables.

!! *** V IMP ** south_north (LAT), west_east(LON) ARE WRITTEN FOR 1:JM-2, 1:IM-2 respectively..

! ** This is because, if the boundary index 770,771(for IM) & 542,543(for JM) are included, the graphics (in Grads & other programs) are misplaced as Lat and long extend beyond 90 & 180 (Long should be from -180 to 180 and Lat -90 to 90). 

      count(1) = jm-2
      count(2) = 1
      start(1) = 1

      do i = 1, time_step
        start(2) = i
        STATUS=NF_PUT_VARA_REAL( NCID, LATVAR_ID, start, count,
     &      south_north(1:JM-2) )
        IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
        print*,'VALUES PUT IN south_north'
      enddo

      count(1) = im-2
      count(2) = 1
      start(1) = 1
      do i = 1, time_step
        start(2) = i
        STATUS=NF_PUT_VARA_REAL( NCID, LONGVAR_ID, start, count,
     &      west_east(1:IM-2) ) 
        IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
        print*,'VALUES PUT IN west_east'
      enddo

      count(1) = lsm-2
      count(2) = 1
      start(1) = 1
      do i = 1, lsm-2
        rev_pres(lsm - 1 - i) = pres( i )
      enddo 
      do i = 1, time_step
        start(2) = i
        if ( reverse_presure.eq.1 ) then
        STATUS=NF_PUT_VARA_INT( NCID, LEVVAR_ID, start, count,
     &      rev_pres(1:LSM-2) )
        else 
        STATUS=NF_PUT_VARA_INT( NCID, LEVVAR_ID, start, count,
     &      pres(1:LSM-2) )
        endif
        IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
        print*,'VALUES PUT IN lev'
      enddo

      count(1) = 1
      do i = 1, time_step
        start(1) = i
        STATUS=NF_PUT_VARA_INT( NCID, TIMVAR_ID, start, count,
     &      time_value(i) )
        IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
        print*,'Values written to time '
      enddo

! Write to variables GLAT/GLON...!! *** V IMP ** ONLY GLAT, GLON ARE WRITTEN FOR 1:JM-2, 1:IM-2 respectively
!*** Other variables are written from 2:JM-1 , 2:IM-1 (to remove the western and eastern boundaries) ****!!!

!      count(1) = jm-2
!      count(2) = 1
!      start(1) = 1
!      do i = 1, time_step
!        start(2) = i
!      STATUS=NF_PUT_VARA_REAL(NCID,GLATVAR_ID,start,count,
!     & GLAT(1:JM-2))
!      IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
!      print*,'VALUES PUT IN Glat'
!       enddo
!
!       count(1) = im-2
!       count(2) = 1
!       start(1) = 1
!       do i = 1, time_step
!         start(2) = i
!         STATUS=NF_PUT_VARA_REAL(NCID,GLONVAR_ID,start,count,
!     &                           GLON(1:IM-2)) 
!         IF(STATUS.NE.NF_NOERR) PRINT*, NF_STRERROR(STATUS)
!         print*,'VALUES PUT IN Glon'
!       enddo


!-------  Inicializamos los vectores start y count  -------------------------
    
       count_sl(1) = im-2
       count_sl(2) = jm-2
       count_sl(3) = lsm-2
       count_sl(4) = 1
       start_sl(1) = 1
       start_sl(2) = 1
       start_sl(3) = 1
       start_sl(4) = time_step

       count_3(1) = im-2
       count_3(2) = jm-2
       count_3(3) = 1
       start_3(1) = 1
       start_3(2) = 1
       start_3(3) = time_step
       
       count_w(1) = nwets
       count_w(2) = im-2
       count_w(3) = jm-2
       count_w(4) = 1
       start_w(1) = 1          
       start_w(2) = 1
       start_w(3) = 1
       start_w(4) = time_step

       count_aero(1) = 8
       count_aero(2) = im-2
       count_aero(3) = jm-2
       count_aero(4) = 1
       start_aero(1) = 1
       start_aero(2) = 1
       start_aero(3) = 1
       start_aero(4) = time_step

       call put_var3_values( NCID, 'hrco', GLATVAR_ID, start_3, count_3,
     &     lat(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, 'hrco', GLONVAR_ID, start_3, count_3,
     &     lon(2:IM-1,2:JM-1) )

!-------- Writing Meteo outputs-------------------------

       call put_var4_values( NCID, CFG_T, TSL_ID, start_sl, count_sl,
     &     tsl(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)

       call put_var4_values( NCID, CFG_Q, QSL_ID, start_sl, count_sl,
     &     qsl(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)

       call put_var4_values( NCID, CFG_CLDFRA, CLDFRA_ID, start_sl,
     &     count_sl, cldfra(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)

       call put_var4_values( NCID, CFG_RLWTT, RLWTT_ID, start_sl,
     &     count_sl, rlwtt(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)

       call put_var4_values( NCID, CFG_RSWTT, RSWTT_ID, start_sl,
     &     count_sl, rswtt(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)

       call put_var4_values( NCID, CFG_F_ICE, F_ICE_ID, start_sl,
     &     count_sl, f_ice(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_F_RIMEF, F_RIMEF_ID, start_sl,
     &     count_sl, f_rimef(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_F_RAIN, F_RAIN_ID, start_sl,
     &     count_sl, f_rain(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_HSL, HSL_ID, start_sl, count_sl,
     &     hsl(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_U, USL_ID, start_sl,
     &     count_sl, usl_h(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_V, VSL_ID, start_sl,
     &     count_sl, vsl_h(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_CWSL, CWSL_ID, start_sl,
     &     count_sl, cw(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_Q2SL, Q2SL_ID, start_sl,
     &     count_sl, q2(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var4_values( NCID, CFG_W, WSL_ID, start_sl, count_sl,
     &     w(2:IM-1,2:JM-1,1:LSM-2), reverse_presure)
      
       call put_var3_values( NCID, CFG_SLP, SLP_ID, start_3, count_3,
     &     slp(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_PD, PD_ID, start_3, count_3,
     &     pd(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_FIS, FIS_ID, start_3, count_3,
     &     fis(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_PINT, PINTS_ID, start_3,
     &     count_3, pints(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_THS, THS_ID, start_3, count_3,
     &     ths(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_QS, QS_ID, start_3, count_3,
     &     qs(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_SNO, SNO_ID, start_3, count_3,
     &     sno(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_ROF, ROF_ID, start_3, count_3,
     &     rof(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_USTAR, USTAR_ID, start_3,
     &     count_3, ustar(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_AKHS, AKHS_ID, start_3, count_3,
     &     akhs(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_AKMS, AKMS_ID, start_3, count_3,
     &     akms(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_ACPREC, ACPREC_ID, start_3,
     &     count_3, acprec(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_CUPREC, CUPREC_ID, start_3,
     &     count_3, cuprec(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_U10, U10_ID, start_3, count_3,
     &     u10(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_V10, V10_ID, start_3, count_3,
     &     v10(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_TH10, TH10_ID, start_3, count_3,
     &     th10(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_Q10, Q10_ID, start_3, count_3,
     &     q10(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_TH02, TH02_ID, start_3, count_3,
     &     th02(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_Q02, Q02_ID, start_3, count_3,
     &     q02(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_SLWD, SLWD_ID, start_3, count_3,
     &     slwd(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_SSW, SSW_ID, start_3, count_3,
     &     ssw(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_THZ0, THZ0_ID, start_3, count_3,
     &     thz0(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_QZ0, QZ0_ID, start_3, count_3,
     &     qz0(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_Z0, Z0_ID, start_3, count_3,
     &     z0(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_PS, Ps_ID, start_3, count_3,
     &     ps(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_PSHLTR, PSHLTR_ID, start_3,
     &      count_3, pshltr(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_T2, T2_ID, start_3, count_3,
     &     t2(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_MAXT2, MAXT2_ID, start_3,
     &     count_3, maxt2(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_MINT2, MINT2_ID, start_3,
     &     count_3, mint2(2:IM-1,2:JM-1) )


!-------- Writing Radiative outputs-------------------------

       call put_var3_values( NCID, CFG_ACFRCV, ACFRCV_ID, start_3,
     &     count_3, acfrcv(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ACFRST, ACFRST_ID, start_3,
     &     count_3, acfrst(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ALBASE, ALBASE_ID, start_3,
     &     count_3, albase(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ALWIN, ALWIN_ID, start_3,
     &     count_3, alwin(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ALWOUT, ALWOUT_ID, start_3,
     &     count_3, alwout(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ALWTOA, ALWTOA_ID, start_3,
     &     count_3, alwtoa(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ASWIN, ASWIN_ID, start_3,
     &     count_3, aswin(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ASWOUT, ASWOUT_ID, start_3,
     &     count_3, aswout(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ASWTOA, ASWTOA_ID, start_3,
     &     count_3, aswtoa(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_BGROFF, BGROFF_ID, start_3,
     &     count_3, bgroff(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CFRACH, CFRACH_ID, start_3,
     &     count_3, cfrach(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CFRACL, CFRACL_ID, start_3,
     &     count_3, cfracl(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CFRACM, CFRACM_ID, start_3,
     &     count_3, cfracm(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CLDEFI, CLDEFI_ID, start_3,
     &     count_3, cldefi(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CMC, CMC_ID, start_3, count_3,
     &     cmc(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CNVBOT, CNVBOT_ID, start_3,
     &     count_3, cnvbot(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CNVTOP, CNVTOP_ID, start_3,
     &     count_3, cnvtop(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CPRATE, CPRATE_ID, start_3,
     &     count_3, cprate(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CUPPT, CUPPT_ID, start_3,
     &      count_3, cuppt(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CZEN, CZEN_ID, start_3, count_3,
     &     czen(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_CZMEAN, CZMEAN_ID, start_3,
     &     count_3, czmean(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_MXSNAL, MXSNAL_ID, start_3,
     &     count_3, mxsnal(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_RADOT, RADOT_ID, start_3,
     &     count_3, radot(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_RLWIN, RLWIN_ID, start_3,
     &     count_3, rlwin(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_RLWTOA, RLWTOA_ID, start_3, 
     &     count_3, rlwtoa(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_RSWIN, RSWIN_ID, start_3,
     &     count_3, rswin(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_RSWINC, RSWINC_ID, start_3,
     &     count_3, rswinc(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_RSWOUT, RSWOUT_ID, start_3,
     &     count_3, rswout(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_SFCLHX, SFCLHX_ID, start_3,
     &     count_3, sfclhx(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_SFCSHX, SFCSHX_ID, start_3,
     &     count_3, sfcshx(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_SIGT4, SIGT4_ID, start_3,
     &     count_3, sigt4(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_EPSR, EPSR_ID, start_3, count_3,
     &     epsr(2:IM-1,2:JM-1) )

!       call put_var4_values( NCID, CFG_TGT, TG_ID, start_w, count_w,
!     &     tg(1:NWETS,2:IM-1,2:JM-1), NWETS, IM-2, JM-2 )
!      
!       call put_var4_values( NCID, CFG_WGT, WG_ID, start_w, count_w,
!     &     wg(1:NWETS,2:IM-1,2:JM-1), NWETS, IM-2, JM-2 )


!-------- Writing Dust outputs-------------------------

       call put_var4_values( NCID, CFG_DUST_CONC, DUST_CONC_ID,
     &     start_sl, count_sl, dustsl(2:IM-1,2:JM-1,1:LSM-2),
     &     reverse_presure)

       call put_var3_values( NCID, CFG_DUST_AOD_350, DUST_AOD_350_ID,
     &     start_3, count_3, dust_aod350(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_AOD_450, DUST_AOD_450_ID,
     &     start_3, count_3, dust_aod450(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_AOD_500, DUST_AOD_500_ID,
     &     start_3, count_3, dust_aod500(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_AOD_550, DUST_AOD_550_ID,
     &     start_3, count_3, dust_aod550(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_AOD_650, DUST_AOD_650_ID,
     &     start_3, count_3, dust_aod650(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_AOD_800, DUST_AOD_800_ID,
     &     start_3, count_3, dust_aod800(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_AOD_900, DUST_AOD_900_ID,
     &     start_3, count_3, dust_aod900(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_EXT_550_SFC,
     &     DUST_EXT_550_SFC_ID, start_3, count_3, 
     &     dust_ext550_sfc(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_SCONC, DUST_SCONC_ID,
     &     start_3, count_3, dust_sconc(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_SCONC02, DUST_SCONC02_ID,
     &     start_3, count_3, dust_sconc02(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_SCONC10, DUST_SCONC10_ID,
     &     start_3, count_3, dust_sconc10(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_DUST_PM10_SCONC10,
     &     DUST_PM10_SCONC10_ID, start_3, count_3, 
     &     dust_pm10_sconc10(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_DUST_PM25_SCONC10,
     &     DUST_PM25_SCONC10_ID, start_3, count_3, 
     &     dust_pm25_sconc10(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_DUST_WETDEP_ACPREC,
     &     DUST_WETDEP_ACPREC_ID, start_3, count_3,
     &     dust_wetdep(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_DUST_WETDEP_CUPREC,
     &     DUST_WETDEP_CUPREC_ID, start_3, count_3,
     &     dust_wetdep(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_DUST_DRYDEP, DUST_DRYDEP_ID,
     &     start_3, count_3, dust_drydep(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_DUST_LOAD, DUST_LOAD_ID, start_3,
     &      count_3, dust_load(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_DUST_EMI, DUST_EMI_ID, start_3,
     &      count_3, dust_emi(2:IM-1,2:JM-1) )

       call put_var4_values( NCID, CFG_DUST_EXT_550, DUST_EXT_550_ID,
     &     start_sl, count_sl, dust_ext(2:IM-1,2:JM-1,1:LSM-2),
     &     reverse_presure)


      
!-------- Writing Dust bin outputs-------------------------

      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_LOAD_BIN,
     &        dust_load_bin_ids(bin),
     &        start_3, count_3, dload(bin, 2:IM-1,2:JM-1) )
      enddo
      
      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_DRYDEP_BIN,
     &        dust_drydep_bin_ids(bin),
     &        start_3, count_3, aero_depdry(bin, 2:IM-1,2:JM-1) )
      enddo
      
      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_WETDEP_ACPREC_BIN,
     &        dust_wetdep_acprec_bin_ids(bin),
     &        start_3, count_3, aero_acprec(bin, 2:IM-1,2:JM-1) )
      enddo
      
      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_WETDEP_CUPREC_BIN,
     &        dust_wetdep_cuprec_bin_ids(bin),
     &        start_3, count_3, aero_cuprec(bin, 2:IM-1,2:JM-1) )
      enddo
      
      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_EMI_BIN,
     &        dust_emi_bin_ids(bin), start_3, count_3,
     &        emiss_dust(bin, 2:IM-1,2:JM-1) )
      enddo
      
      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_AOD_550_BIN,
     &        dust_aod550_bin_ids(bin),
     &        start_3, count_3, dust_aod550_bin(2:IM-1,2:JM-1,bin) )
      enddo
      
      do bin=1,kps
         call put_var3_values( NCID, CFG_DUST_SCONC_BIN,
     &        dust_sconc_bin_ids(bin), start_3, count_3,
     &        dust_bins(2:IM-1,2:JM-1,bin) )
      enddo
      
!-------- Writing Land Use outputs-------------------------

       call put_var3_values( NCID, CFG_SM, SM_ID, start_3, count_3,
     &     sm(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_SICE, SICE_ID, start_3, count_3,
     &     sice(2:IM-1,2:JM-1) )
      
       call put_var3_values( NCID, CFG_SST, SST_ID, start_3, count_3,
     &     sst(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_INSOIL, INSOIL_ID, start_3,
     &     count_3, insoil(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_INVEG, INVEG_ID, start_3,
     &     count_3, inveg(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_VEGFRC, VEGFRC_ID, start_3,
     &     count_3, vegfrc(2:IM-1,2:JM-1) )

       call put_var3_values( NCID, CFG_ALBEDO, ALBEDO_ID, start_3,
     &     count_3, albedo(2:IM-1,2:JM-1) )


!-------- Writing aero outputs-------------------------

!       call put_var4_values( NCID, CFG_AERO_ACPREC, AERO_ACPREC_ID,
!     &     start_aero, count_aero, aero_acprec(1:8,2:IM-1,2:JM-1) )
!
!       call put_var4_values( NCID, CFG_AERO_CUPREC, AERO_CUPREC_ID,
!     &     start_aero, count_aero, aero_cuprec(1:8,2:IM-1,2:JM-1) )
!
!       call put_var4_values( NCID, CFG_AERO_DEPDRY, AERO_DEPDRY_ID,
!     &     start_aero, count_aero, aero_depdry(1:8,2:IM-1,2:JM-1) )

!       call put_var4_values( NCID, CFG_AERO_DLOAD, AERO_DLOAD_ID,
!     &     start_aero, count_aero, dload(1:8,2:IM-1,2:JM-1) )

! Cerramos el archivo...

      STATUS=NF_CLOSE(NCID)

      PRINT*,'NETCDF FILE No: ',k,' SUCCESSFULLY CREATED '     

      enddo ! K loop
      stop
      end

!&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
      subroutine spline(nold,xold,yold,y2,nnew,xnew,ynew,p,q)           
!     ******************************************************************
!     *                                                                *
!     *  this is a one-dimensional cubic spline fitting routine        *
!     *  programed for a small scalar machine.                         *
!     *                                                                *
!     *  programer: z. janjic, yugoslav fed. hydromet. inst., beograd  *
!     *                                                                *
!     *                                                                *
!     *                                                                *
!     *  nold - number of given values of the function.  must be ge 3. *
!     *  xold - locations of the points at which the values of the     *
!     *         function are given.  must be in ascending order.       *
!     *  yold - the given values of the function at the points xold.   *
!     *  y2   - the second derivatives at the points xold.  if natural *
!     *         spline is fitted y2(1)=0. and y2(nold)=0. must be      *
!     *         specified.                                             *
!     *  nnew - number of values of the function to be calculated.     *
!     *  xnew - locations of the points at which the values of the     *
!     *         function are calculated.  xnew(k) must be ge xold(1)   *
!     *         and le xold(nold).                                     *
!     *  ynew - the values of the function to be calculated.           *
!     *  p, q - auxiliary vectors of the length nold-2.                *
!     *                                                                *
!     ******************************************************************                                                                       
!-----------------------------------------------------------------------
      dimension                          
     2 xold(nold),yold(nold),y2(nold),p(nold),q(nold)
     3,xnew(nnew),ynew(nnew)
!-----------------------------------------------------------------------
      noldm1=nold-1                                                     
!                                                                       
      dxl=xold(2)-xold(1)                                               
      dxr=xold(3)-xold(2)                                               
      dydxl=(yold(2)-yold(1))/dxl                                       
      dydxr=(yold(3)-yold(2))/dxr                                       
      rtdxc=.5/(dxl+dxr)                                                
!                                                                       
      p(1)= rtdxc*(6.*(dydxr-dydxl)-dxl*y2(1))                          
      q(1)=-rtdxc*dxr                                                   
!                                                                       
      if(nold.eq.3) go to 700                                           
!-----------------------------------------------------------------------
      k=3                                                               
!                                                                       
 100  dxl=dxr                                                           
      dydxl=dydxr                                                       
      dxr=xold(k+1)-xold(k)                                             
      dydxr=(yold(k+1)-yold(k))/dxr                                     
      dxc=dxl+dxr                                                       
      den=1./(dxl*q(k-2)+dxc+dxc)                                       
!                                                                       
      p(k-1)= den*(6.*(dydxr-dydxl)-dxl*p(k-2))                         
      q(k-1)=-den*dxr                                                   
!                                                                       
      k=k+1                                                             
      if(k.lt.nold) go to 100                                           
!-----------------------------------------------------------------------
 700  k=noldm1                                                          
!                                                                       
 200  y2(k)=p(k-1)+q(k-1)*y2(k+1)                                       
!                                                                       
      k=k-1                                                             
      if(k.gt.1) go to 200                                              
!-----------------------------------------------------------------------
      k1=1                                                              
!                                                                       
 300  xk=xnew(k1)                                                       
!                                                                       
      do 400 k2=2,nold                                                  
      if(xold(k2).le.xk) go to 400                                      
      kold=k2-1                                                         
      go to 450                                                         
 400  continue                                                          
      ynew(k1)=yold(nold)                                               
      go to 600                                                         
!                                                                       
 450  if(k1.eq.1)   go to 500                                           
      if(k.eq.kold) go to 550                                           
!                                                                       
 500  k=kold                                                            
!                                                                       
      y2k=y2(k)                                                         
      y2kp1=y2(k+1)                                                     
      dx=xold(k+1)-xold(k)                                              
      rdx=1./dx                                                         
!                                                                       
      ak=.1666667*rdx*(y2kp1-y2k)                                       
      bk=.5*y2k                                                         
      ck=rdx*(yold(k+1)-yold(k))-.1666667*dx*(y2kp1+y2k+y2k)            
!                                                                       
 550  x=xk-xold(k)                                                      
      xsq=x*x                                                           
!                                                                       
      ynew(k1)=ak*xsq*x+bk*xsq+ck*x+yold(k)                             
!                                                                       
 600  k1=k1+1                                                           
      if(k1.le.nnew) go to 300                                          
!-----------------------------------------------------------------------
      return                                                            
      end                                                               
!-----------------------------------------------------------------------
!
      subroutine tllwin(almd,aphd,tpus,tpvs,tlm0d,tph0d,pus,pvs)
!     ******************************************************************
!     *                                                                *
!     *  tll to ll transformation of velocity                          *
!     *                                                                *
!     *  programer: z.janjic, yugoslav fed. hydromet. inst.,           *
!     *                 beograd, 1982 (ltlwin)                         *
!     *             cperez, modified for tll to ll transformation      *
!     ******************************************************************
!
!-----------------------------------------------------------------------
      parameter(dtr=3.1415926535897932384626433832795/180.)
!-----------------------------------------------------------------------
!
      tph0=tph0d*dtr
      ctph0=cos(tph0)
      stph0=sin(tph0)
!
      relm=(almd-tlm0d)*dtr
      srlm=sin(relm)
      crlm=cos(relm)
!
      ph=aphd*dtr
      sph=sin(ph)
      cph=cos(ph)
!
      cc=cph*crlm
      tph=asin(ctph0*sph-stph0*cc)
      rctph=1./cos(tph)
!
      cray=stph0*srlm*rctph
      dray=(ctph0*cph+stph0*sph*crlm)*rctph
!
!      tpus=dray*pus-cray*pvs
!      tpvs=cray*pus+dray*pvs
!
      pvs=dray*tpvs-cray*tpus
      pvs=pvs/(cray**2+dray**2)
!
      pus=(tpus+cray*pvs)/dray
!
!-----------------------------------------------------------------------
      return
      end

      subroutine declare_variable(ncdf_id, v_check, var_name, var_type,
     &     var_id, var_n_dims, dimensions, units, title, lname, coord,
     &     fmiss)
        INCLUDE 'netcdf.inc'
        character(4) v_check
        integer ncdf_id, var_id, var_n_dims, status
        character(*) var_name, units, title, lname, coord
        real fmiss
        if(v_check(4:4).EQ.'o') then
          STATUS=NF_DEF_VAR(ncdf_id, var_name, var_type, var_n_dims, 
     &        dimensions, var_id)
          print*,'Variable '//var_name//' created with id ',var_id
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          STATUS=NF_PUT_ATT_TEXT(ncdf_id, var_id, 'units', LEN(units), 
     &        units)
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          STATUS=NF_PUT_ATT_TEXT(ncdf_id, var_id,'title',LEN(title),
     &        title)
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          STATUS=NF_PUT_ATT_TEXT(ncdf_id, var_id,'long_name',LEN(lname),
     &        lname)
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          STATUS=NF_PUT_ATT_TEXT(ncdf_id, var_id, 'coordinates', 
     &        LEN(coord), coord)
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          STATUS = nf_put_att_real(ncdf_id, var_id, '_FillValue',
     &         nf_real, 1, fmiss)
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          STATUS = nf_put_att_real(ncdf_id, var_id, 'missing_value',
     &         nf_real, 1, fmiss)
          IF(STATUS.NE.NF_NOERR) PRINT*,STATUS,NF_STRERROR(STATUS)
          print*,var_id
        endif
        return
      end
!
      subroutine put_var4_values( ncdf_id, v_check, var_id,
     &      start, count, values, reverse_presure)
!     &      start, count, values, x, y, z)
        INCLUDE 'netcdf.inc'
!        integer x, y, z
        character(4) v_check
        integer z, reverse_presure
        integer count(4), start(4),acount(4),astart(4)
!        real values(x,y,z)
        real values(count(1),count(2),count(3))
        integer ncdf_id, var_id
        z=count(3)
        astart = start
        acount = count
        if(v_check(4:4).EQ.'o') then
          print*,'Going to write variable ',var_id
          if(reverse_presure.eq.1) then
            acount(3)=1
            do k=1,z
!              print*,k,z,count(3)
              astart(3)=z+1-k
              STATUS = nf_put_vara_real( ncdf_id, var_id, astart,
     &            acount, values(:,:,k))
            enddo
          else
            STATUS = nf_put_vara_real( ncdf_id, var_id, astart, acount,
     &          values)
          endif
          IF(STATUS.NE.NF_NOERR) PRINT*, STATUS,NF_STRERROR(STATUS)
        endif
        return
      end

      subroutine put_var3_values( ncdf_id, v_check, var_id,
     &      start, count, values)
        INCLUDE 'netcdf.inc'
        integer status
        integer count(3), start(3)
        real values(count(1),count(2))
        integer ncdf_id, var_id
        character(4) v_check
        if(v_check(4:4).EQ.'o') then
          print*,'Going to write variable ',var_id
          STATUS = nf_put_vara_real( ncdf_id, var_id, start, count,
     &        values)
          IF(STATUS.NE.NF_NOERR) PRINT*, STATUS,NF_STRERROR(STATUS)
        endif
        return
      end

      subroutine add_attribute_f(ncdf_id, var_id, attname, attvalue)
        INCLUDE 'netcdf.inc'
        integer ncdf_id, var_id, status
        character(*) attname
        real attvalue

        status = nf_put_att_real(ncdf_id, var_id, attname, NF_REAL, 1,
     &                         attvalue)
        IF(status.NE.NF_NOERR) PRINT*, NF_STRERROR(iret)

        return
      end


      subroutine get_out_name(fn, k, fnout)
        character*1 fno1
        character*2 fno2
        character*3 fno3
        character(*) fn
        character(*) fnout
        integer k
        if(k.le.10) then            ! if k is less than 2 digits...just to format the string 
          write(fno1,'(i1)')(k-1)
          fnout=fn//'00'//fno1//'.nc' ! convert to string
        elseif(k.le.100) then
          write(fno2,'(i2)')(k-1)
          fnout=fn//'0'//fno2//'.nc'      ! convert to string
        else
          write(fno3,'(i3)')(k-1)
          fnout=fn//fno3//'.nc'      ! convert to string
        endif
        return
      end

      ! Funciones para hacer el read de matrices de numeros reales de 2 y 3 dimensiones

      subroutine reverse_read3r( file_desc, config_value, data_matrix,
     &     dims)
        character(4) config_value
        integer file_desc, bin
        integer dims(3)
        real data_matrix(dims(1), dims(2), dims(3))
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
        !print*,'  pong'
          do bin=1,dims(1)
            read(file_desc) data_matrix(bin,:,:)
          enddo
        endif
      end

      subroutine verified_read3r( file_desc, config_value, data_matrix,
     &     dims)
        character(4) config_value
        integer file_desc, l
        integer dims(3)
        real data_matrix(dims(1), dims(2), dims(3))
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
          !print*,'  pong'
          do l=1,dims(3)
            read(file_desc) data_matrix(:,:,l)
          enddo
        endif
      end

      subroutine verified_read2r( file_desc, config_value, data_matrix,
     &     dims)
        character(4) config_value
        integer file_desc
        integer dims(3)
        real data_matrix(dims(1), dims(2))
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
        !print*,'  pong'
          read(file_desc)data_matrix
        endif
      end
      subroutine verified_read1i( file_desc, config_value, data_matrix,
     &     dims)
        integer file_desc
        character(4) config_value
        integer dims
        integer data_matrix(dims)
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
        !print*,'  pong'
          read(file_desc) data_matrix
        endif
      end

      subroutine verified_read1r( file_desc, config_value, data_matrix,
     &     dims)
        integer file_desc
        character(4) config_value
        integer dims
        real data_matrix(dims)
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
        !print*,'  pong'
          read(file_desc) data_matrix
        endif
      end

      subroutine verified_read0r( file_desc, config_value, valor)
        integer file_desc
        character(4) config_value
        real valor
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
          read(file_desc) valor
          !print*,valor
        endif
      end

      subroutine verified_read0i( file_desc, config_value, valor)
        integer file_desc
        character(4) config_value
        integer valor
        !print*,'ping'
        if(config_value(1:1).eq.'h') then
          read(file_desc) valor
          !print*,valor
        endif
      end
