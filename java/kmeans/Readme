This is the Readme for:
K-means Fragments

[Name]: K-means Fragments
[Contact Person]: support-compss@bsc.es
[Access Level]: public
[License Agreement]: GPL
[Platform]: COMPSs

[Body]
 == Description ==
K-means clustering is a method of cluster analysis that aims to partition ''n'' points into ''k'' clusters in which each point belongs to the cluster with the nearest mean. It follows an iterative refinement strategy to find the centers of natural clusters in the data.

When executed with COMPSs, K-means first generates the input points by means of initialization tasks. For parallelism purposes, the points are split in a number of fragments received as parameter, each fragment being created by an initialization task and filled with random points.

After the initialization, the algorithm goes through a set of iterations. In every iteration, a computation task is created for each fragment; then, there is a reduction phase where the results of each computation are accumulated two at a time by merge tasks; finally, at the end of the iteration the main program post-processes the merged result, generating the current clusters that will be used in the next iteration. Consequently, if ''F'' is the total number of fragments, K-means generates ''F'' computation tasks and ''F-1'' merge tasks per iteration.


== Versions ==
=== Version 1: Binary Serialization ===
kmeans_frag.kmeans_frag                     - The parameters are serialized using binary serialization. All the codes of this part are packaged under the kmeans_frag/ folder.
=== Version 2: Dataset from files ===
kmeans_frag_files.kmeans_frag_files               - Dataset from files version. All codes of this part are packaged under the kmeans_frag_files/ folder.


== Execution instructions ==
Usage:
runcompss kmeans_frag.KMeans_frag -c <numClusters> -i <numIterations> -n <numPoints> -d <numDimensions> -f <numFragments> -s <seed> -r <scaleFactor> -ef <sameFragments>
runcompss kmeans_frag_files.KMeans_frag_files -c <numClusters> -i <numIterations> -n <numPoints> -d <numDimensions> -f <numFragments> -s <seed> -r <scaleFactor> -p <datasetPath> -fc <firstCenters>


== Execution with COMPSs Example ==
runcompss kmeans_frag.KMeans_frag -c 100 -i 10 -n 9984000 -d 1000 -f 512 -s 5 -r 10 -ef false
runcompss kmeans_frag_files.KMeans_frag_files -c 100 -i 10 -n 9984000 -d 1000 -f 512 -s 5 -r 10 -p ~/datasetFolder/ -fc 0


== Execution without COMPSs Example ==
java -classpath kmeans_frag.jar kmeans_frag.KMeans_frag -c 2 -i 10 -n 20 -d 3 -f 4 -s 5 -r 10 -ef false
java -classpath kmeans_frag.jar kmeans_frag_files.KMeans_frag_files -c 2 -i 10 -n 20 -d 3 -f 4 -s 5 -r 10 -p ~/datasetFolder/ -fc 0


== Build ==
=== Option 1: Native java ===
cd /PATH_TO_JAVA_APPS/kmeans_frag/; javac src/main/java/kmeans_frag/*/*.java
cd src/main/java/; jar cf kmeans_frag.jar kmeans_frag/
cd ../../../; mkdir jar; mv src/main/java/kmeans_frag.jar jar/

=== Option 2: Maven ===
cd /PATH_TO_JAVA_APPS/kmeans_frag/
mvn clean package
